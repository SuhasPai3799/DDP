

// **********************************************************************
// Tests and Comparisons
// **********************************************************************

// test for value under path, intermediate tests are generated
if (child.brother.firstName) return "foo";

// subsumption of dialogue acts, (equality is also possible)
if (lastDA() <= #AcceptOffer(Bringing)) return "foo";

// Two rdf objects being the same object. Mark the difference to the next
// example! Here, the objects are compared, not the classes. Same for !=,
// but all other comparison operators compare classes
Child c1;
Person c2;
if (c1 == c2) return "foo";

// Is the class of c1 a subclass (a strict subclass) of the class of c2 ?
if (c1 <= c2) return "foo";
if (c1 < c2) return "foo";

// Is the class of c1 a subclass of Child?
if (c1 <= Child) return "foo";

// Is s not null and not empty?
String s = "bar";
if (s) return "foo";

// Is s.compareTo(t) < 0
String s = "bar"; t = "baz";
if (s < t) return "foo";

// Is i not null and not zero? (Same for all other Number containers)
Integer i = -1;
if (i) return "foo";

// Is o not null?
Object o = new Object();
if (o) return "foo";

// **********************************************************************
// Forward declaration of methods
// **********************************************************************

String foo(String a, String b);

if (foo("a", "b")) {
  log.info("yes!");
}

String foo (String a, String b) { return a + b; }

// **********************************************************************
// Breaking out of rules
// **********************************************************************

// break can be used to exit the rule specified, rules following this
// rule will still be executed
test_rule:
  if (true) {
    second_rule:
      if (false) {
        break test_rule;
      }
  }

// return from a file (not looking at subsequent rules) with cancel
test_rule:
  if (true) {
    second_rule:
      if (false) {
        cancel;
      }
  }

// Stop all rule execution (even at higher levels) with cancel_all
test_rule:
  if (true) {
    second_rule:
      if (false) {
        cancel_all;
      }
  }

// **********************************************************************
// Near-to-Java features
// **********************************************************************

// you can declare a variable final if you need to use it in a propose or
// timeout block
test_rule:
  if(true) {
    final c = "hi";
    final boolean b = false;
    propose("test") {
      if(c.equals("bye"))
        return true;
    }
  }

// **********************************************************************
// Coverage - To be revised and sorted properly
// **********************************************************************

if (true && !false) { /* do something */} else { /* do something else */}

// TODO: sum1 and sum2 should, but do not become a proper declaration here
// An unknown function is used. The system tries to inferr the type of
// operations that contain it from their other parts
somevar = getSomething();
sum1 = 3 + somevar;
sum2 = somevar + 3;
anothervar = getSomething();
someint = 1 < 3? anothervar : 3;

// You can use casts and conditional expressions just like in Java
Integer anotherint = (Integer) i;
anotherint = anotherint < 3? anotherint : 3;

// There are also while and for loops and switch-case blocks available
while (true) { continue; }
for (abc = 1; abc < 10; abc++) { abc++;}

ArrayList<String> iterlist;
// The following two lines are equivalent
for (String a : iterlist) {}
for (a : iterlist) {}

String str;
switch (str) {
  case "a": break;
  case "b":
  default:
}

// It is possible to perform implicit casts on iterable elements in a for
// loop; there is, however, no type safety promise from our side!
ArrayList<Object> iterlist2;
for (SomeClass a : iterlist2) {}

// These are some examples for lambda expressions
newlist = {"a", "cd", "ab", "b"};
allas = filter(newlist, (element) -> ((String)element).contains("a"));
dosort = sort(newlist, (a, b) -> (int)(((String)a).lenght() - ((String)b).length()));

// Creation of dialogue acts. Elements that are Variables need to be
// preceded by ^, all others will be converted to Strings
robotname = "Robert";
dia = #Inform(Liking, agent=username, patient=^robotname);

// You can set labelled timeouts that will execute the code given to them
// once the time (given in milliseconds) is over
timeout("do_something", 15000) {
  callToSomeMethod();
}




