* Erleuchtung bzgl. Wrapperklasse: Agent vs. NaoAgent vs. PalAgent
  1. NaoAgent scheint eigentlich eine klasse wie TimelineUtils zu sein (oder
     könnte so sein)
  2. Sollten PalAgent und NaoAgent nicht die Plätze tauschen, also:
     NaoAgent extends PalAgent, und nicht umgekehrt.
  3. PalAgent wird nur einmal erzeugt, und alle Variablen und Methoden stehen
     also zur Verfügung, auch die nicht-statischen! Damit kann man aus
     Java-Klassen .rudi Methoden benutzen!
     Ausprobieren mit endQuiz (im Moment in NaoAgent)
* Fragen aus dem Durchforsten von VisitorType
  - ist dokumentiert, dass folgendes ein "clear" ist: //done
    child.name = null
* Implementation Patterns and Caveats
  - lastDAProcessed() before in propose: lastDA().theme :( //done
  - lastDAProcessed() after emitDA :( //done
  - in general: emitDA suspends the thread of commands!!! //done
  - if a question was asked: use waitingForResponse()
  - Magic Variable expansion in DialogueActs:
    slotnames *and* arguments with the same name as existing variables are
    replaced by the value of the variable, just as with {...}
    --> create an issue to *REMOVE* this //done
* Queries aus .rudi abfeuern --> missing varargs!?

* Collections probleme: Alles polymorph?

* Dialogue Acts
  - hierarchy of Frames from the ontology with access functions
* processor / abstract processor
  + behaviour sync
    - with optional delays ? (before/after)

* Application examples
  - PAL system
  - Robo demo
  - HySociaTea SB demo
  - Herbea

* Softwarepraktikum
** usability questionnaires / templates
   - which tools
   - how to debug
   - what works
   - what is awkward
   - report bugs

* DONE
+ Timeouts mit "Argumenten", die spezifische Instanzen beackern.
+ hierarchy of DAs
+ functionality: integrate jtfs for subsumption etc.
+ Final refactoring logging
  + Serialize DialogueAct to / from RDF
