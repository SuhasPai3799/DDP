/*@
import de.dfki.chatcat.util.Date;

 @*/

ask_for_name:
if (user && !user.name && !(myLastDA() >= #WHQuestion(Name))) {
  propose("ask_name") {
    emitDA(#WHQuestion(Name));
  }
  lastDAprocessed();
}

greet_back:
if (lastDA() >= #InitialGreeting(Greet)) {
  propose("greet back") {
    if (!saidInSession(#Salutation(top)))
      emitDA(#ReturnGreeting(Greet));
  }
  lastDAprocessed();
  user = new Human;
}

remember_name:
if (lastDA() >= #Inform(Name)) {
  user.name = lastDA().what;
  lastDAprocessed();
  propose("remember"){
    emitDA(#ReturnGreeting(Greet, name={user.name}));
  }
  propose("firsttime"){
    emitDA(#ReturnGreeting(Greet));
  }
}

proactive_greet:
/** use this timeout exactly once */
if (! hasActiveTimeout("robot_starts") && ! isTimedOut("robot_starts")) {
  timeout("robot_starts", 4000) {
  start_conversation:
    // Salutation is the superclass of Initial-/ReturnGreeting
    if (! (receivedInSession(#Salutation(top))
           || saidInSession(#Salutation(top)))) {
      propose("robot_greets") {
        tod = Date.timeOfDay();
        emitDA(#InitialGreeting(Greet, when={tod}));
      }
    }
  }
}

/** Rules related to courses */

answer_courses:
/** Provides description about the course */
if (lastDA()>= #Request(Courses) && lastDA().theme=="CourseInfo")
{	
	course_name = lastDA().what;
	course_info = (String)hfcutils.answerCourseInfo(course_name);
	propose("return_course_info"){
		emitDA(#Request(Courses, cname={course_name}, info={course_info}));
	}
	lastDAprocessed();
}

answer_course_instructor:
/** Provides info about which prof is teaching the course **/
if (lastDA()>= #Request(Courses) && lastDA().theme=="CourseTeacherInfo")
{
  course_name = lastDA().what;
  course_teacher_info = (String)hfcutils.answerCourseTeacherInfo(course_name);
  propose("return_course_teacher_info")
  {
    emitDA(#Request(Courses, cname={course_name}, course_teacher_info={course_teacher_info}));
  }
  lastDAprocessed();
}

answer_course_prereqs:
/** Provides info about prerequisite courses for a given course **/
if (lastDA()>= #Request(Courses) && lastDA().theme=="CoursePrereqInfo")
{
  course_name = lastDA().what;
  course_prereq_info = (String)hfcutils.answerCoursePrereqInfo(course_name);
  propose("return_course_prereq_info")
  {
    emitDA(#Request(Courses, cname={course_name}, course_prereq_info={course_prereq_info}));
  }
  lastDAprocessed();
}

/** Rules related to professors */

answer_prof_courses:
/** Provides answer on courses a professor takes */
if (lastDA()>= #Request(Professor) && lastDA().theme=="CourseInfo")
{
  prof_name = lastDA().what;
  if(prof_name == "pronoun")
  {
    prof_resolved_name = (String)hfcutils.resolveProfName();
    prof_resolved_courses = (String)hfcutils.answerProfCourses(prof_resolved_name);
    propose("return_prof_courses")
    {
      emitDA(#Request(Professor, prof_name={prof_name}, prof_courses = {prof_resolved_courses}));
    }
  }
  else
  {
    clean_prof_name = (String)hfcutils.getProfName(prof_name);
    prof = new Professors;
    prof.name = clean_prof_name;
    prof_courses = (String)hfcutils.answerProfCourses(prof_name);
    propose("return_prof_courses")
    {
      emitDA(#Request(Professor, prof_name={prof_name}, prof_courses = {prof_courses}));
    }
  }
  lastDAprocessed();
}


answer_prof_research:
/** Provides answer on research areas of a prof */
if (lastDA()>= #Request(Professor) && lastDA().theme=="ResearchInfo")
{
  prof_name = lastDA().what;
  if(prof_name == "pronoun")
  {
    prof_resolved_name = (String)hfcutils.resolveProfName();
    prof_resolved_areas = (String)hfcutils.answerProfResearchArea(prof_resolved_name);
    propose("return_prof_research_area")
    {
      emitDA(#Request(Professor, prof_name={prof_resolved_name}, prof_areas = {prof_resolved_areas}));
    }
  }
  else
  {
    clean_prof_name = (String)hfcutils.getProfName(prof_name);
    prof = new Professors;
    prof.name = clean_prof_name;
    prof_areas = (String)hfcutils.answerProfResearchArea(prof_name);
    propose("return_prof_research_area")
    {
      emitDA(#Request(Professor, prof_name={prof_name}, prof_areas = {prof_areas}));
    }
  }
  lastDAprocessed();
}

answer_researchField_profs:
/** Provides answer on profs in a given research aread */
if (lastDA()>= #Request(ResearchField) && lastDA().theme=="Professor")
{
  field_name = lastDA().what;
  field_profs = (String)hfcutils.answerFieldProfs(field_name);
  propose("return_field_profs")
  {
    emitDA(#Request(ResearchField, prof_names={field_profs}, field_name={field_name}));
  }
  lastDAprocessed();
}


/** Rules related to departments */

answer_dept_num_courses:
/** Provides total number of courses for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="CourseCount")
{
  dept_name = lastDA().what;
	tot_c = (String)hfcutils.answerDeptCourseCount(dept_name);
	propose("return_course_total")
	{
		emitDA(#Request(Department,tot_courses={tot_c}, dept_name={dept_name}));
	}
	lastDAprocessed();
}

answer_dept_facilities:
/** Provides answer on facillities in a department */
if (lastDA()>= #Request(Department) && lastDA().theme=="Facilities")
{
  dept_name = lastDA().what;
  facilities = (String)hfcutils.answerDeptFacilities(dept_name);
  propose("return_dept_facilities")
  {
    emitDA(#Request(Department, dept_name = {dept_name}, dept_facilities = {facilities}));
  }
  lastDAprocessed();
}

answer_dept_courses:
/** Provides list of courses for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="CourseList")
{
  dept_name = lastDA().what;
	all_courses = (String)hfcutils.answerDeptCourseList(dept_name);
	propose("return_dept_course_list")
	{
		emitDA(#Request(Department,dept_name={dept_name}, course_list={all_courses}));
	}
	lastDAprocessed();
}


answer_dept_profs:
/** Provides list of profs for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="ProfList")
{
  dept_name = lastDA().what;
	all_profs = (String)hfcutils.answerDeptProfList(dept_name);
	propose("return_dept_prof_list")
	{
		emitDA(#Request(Department,dept_name={dept_name}, prof_list={all_profs}));
	}
	lastDAprocessed();
}

answer_dept_programs:
/** Provides list of programs for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="ProgList")
{
  dept_name = lastDA().what;
	all_programs = (String)hfcutils.answerDeptProgramList(dept_name);
	propose("return_dept_program_list")
	{
		emitDA(#Request(Department,dept_name={dept_name}, program_list={all_programs}));
	}
	lastDAprocessed();
}

answer_dept_ug_programs:
/** Provides list of UG programs for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="UGProgList")
{
  dept_name = lastDA().what;
	all_programs = (String)hfcutils.answerDeptUGProgramList(dept_name);
	propose("return_dept_ug_program_list")
	{
		emitDA(#Request(Department,dept_name={dept_name}, ug_program_list={all_programs}));
	}
	lastDAprocessed();
}

answer_dept_pg_programs:
/** Provides list of PG programs for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="PGProgList")
{
  dept_name = lastDA().what;
	all_programs = (String)hfcutils.answerDeptPGProgramList(dept_name);
	propose("return_dept_pg_program_list")
	{
		emitDA(#Request(Department,dept_name={dept_name}, pg_program_list={all_programs}));
	}
	lastDAprocessed();
}

answer_dept_info:
/** Gives overview about a department */
if (lastDA()>= #Request(Department) && lastDA().theme=="DeptInfo")
{
  dept_name = lastDA().what;
	dept_info = (String)hfcutils.answerDeptInfo(dept_name);
	propose("return_dept_info")
	{
		emitDA(#Request(Department,dept_name={dept_name}, dept_info={dept_info}));
	}
	lastDAprocessed();
}


/** Anaphora resolution rules */

if(lastDA()>= #Request(Professor) && lastDA().theme=="testAnaphora1")
{
  tes = new Courses;
  tes.name = "hi";
  lastDAprocessed();
}

if(lastDA()>= #Request(Professor) && lastDA().theme=="testAnaphora2")
{
  prof_name = (String)hfcutils.resolveProfName();
  lastDAprocessed();
}