/*@
import de.dfki.chatcat.util.Date;
 @*/



/** Rules related to courses */

answer_courses:
/** Provides description about the course */
if (lastDA()>= #Request(Courses) && lastDA().theme=="CourseInfo")
{	
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  { 
    course_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Courses>");
    course_resolved_info = (String)hfcutils.answerCourseInfo(course_resolved_name);
    propose("return_course_info"){
      emitDA(#Inform(Courses, cname={course_resolved_name}, info={course_resolved_info}));
    }
  }
  else
  {
    course_first_name = lastDA().what;
    course_name = (String)hfcutils.cleanCourseNames(course_first_name);
    courseObj = new Courses;
    courseObj.name = course_name;
    course_info = (String)hfcutils.answerCourseInfo(course_name);
    propose("return_course_info"){
      emitDA(#Inform(Courses, cname={course_name}, info={course_info}));
    }
  }
	lastDAprocessed();
}

answer_course_instructor:
/** Provides info about which prof is teaching the course **/
if (lastDA()>= #Request(Courses) && lastDA().theme=="CourseTeacherInfo")
{
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  {
    course_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Courses>");
    course_resolved_teacher_info = (String)hfcutils.answerCourseTeacherInfo(course_resolved_name);
    
    prof_name = (String)hfcutils.getProfNameFromOutput(course_resolved_teacher_info);
    if(prof_name!= "No such course exists.")
    {
      prof = new Professors;
      prof.name = prof_name;
    }
    propose("return_course_teacher_info")
    {
      emitDA(#Inform(Courses, cname={course_resolved_name}, course_teacher_info={course_resolved_teacher_info}));
    }
  }
  else
  { 
    course_first_name = lastDA().what;
    course_name = (String)hfcutils.cleanCourseNames(course_first_name);
    courseObj = new Courses;
    courseObj.name = course_name;
    course_teacher_info = (String)hfcutils.answerCourseTeacherInfo(course_name);
    prof_name = (String)hfcutils.getProfNameFromOutput(course_teacher_info);
    if(prof_name!= "No such course exists.")
    {
      prof = new Professors;
      prof.name = prof_name;
    }
    propose("return_course_teacher_info")
    {
      emitDA(#Inform(Courses, cname={course_name}, course_teacher_info={course_teacher_info}));
    }
  }
  lastDAprocessed();
}

answer_course_prereqs:
/** Provides info about prerequisite courses for a given course **/
if (lastDA()>= #Request(Courses) && lastDA().theme=="CoursePrereqInfo")
{
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  {
    course_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Courses>");
    course_resolved_prereq_info = (String)hfcutils.answerCoursePrereqInfo(course_resolved_name);
    propose("return_course_prereq_info")
    {
      emitDA(#Inform(Courses, cname={course_resolved_name}, course_prereq_info={course_resolved_prereq_info}));
    }
  }
  else
  {
    course_first_name = lastDA().what;
    course_name = (String)hfcutils.cleanCourseNames(course_first_name);
    course_prereq_info = (String)hfcutils.answerCoursePrereqInfo(course_name);
    propose("return_course_prereq_info")
    {
      emitDA(#Inform(Courses, cname={course_name}, course_prereq_info={course_prereq_info}));
    }
  }
  lastDAprocessed();
}

/** Rules related to professors */

answer_prof_courses:
/** Provides answer on courses a professor takes */
if (lastDA()>= #Request(Professor) && lastDA().theme=="CourseInfo")
{
  prof_name = lastDA().what;
  if(prof_name == "pronoun" || (Boolean)hfcutils.checkPersonalPronoun(lastDA().what))
  {
    prof_resolved_name = (String)hfcutils.resolveProfName();
    prof_resolved_courses = (String)hfcutils.answerProfCourses(prof_resolved_name);
    propose("return_prof_courses")
    {
      emitDA(#Inform(Professor, prof_name={prof_name}, prof_courses = {prof_resolved_courses}));
    }
  }
  else
  {
    clean_prof_name = (String)hfcutils.getProfName(prof_name);
    prof = new Professors;
    prof.name = clean_prof_name;
    prof_courses = (String)hfcutils.answerProfCourses(prof_name);
    propose("return_prof_courses")
    {
      emitDA(#Inform(Professor, prof_name={prof_name}, prof_courses = {prof_courses}));
    }
  }
  lastDAprocessed();
}


answer_prof_research:
/** Provides answer on research areas of a prof */
if (lastDA()>= #Request(Professor) && lastDA().theme=="ResearchInfo")
{
  prof_name = lastDA().what;
  if(prof_name == "pronoun" || (Boolean)hfcutils.checkPersonalPronoun(lastDA().what))
  {
    prof_resolved_name = (String)hfcutils.resolveProfName();
    prof_resolved_areas = (String)hfcutils.answerProfResearchArea(prof_resolved_name);
    propose("return_prof_research_area")
    {
      emitDA(#Inform(Professor, prof_name={prof_resolved_name}, prof_areas = {prof_resolved_areas}));
    }
  }
  else
  {
    clean_prof_name = (String)hfcutils.getProfName(prof_name);
    prof = new Professors;
    prof.name = clean_prof_name;
    prof_areas = (String)hfcutils.answerProfResearchArea(prof_name);
    propose("return_prof_research_area")
    {
      emitDA(#Inform(Professor, prof_name={prof_name}, prof_areas = {prof_areas}));
    }
  }
  lastDAprocessed();
}

answer_researchField_profs:
/** Provides answer on profs in a given research aread */
if (lastDA()>= #Request(ResearchField) && lastDA().theme=="Professor")
{
  field_name = lastDA().what;
  field_profs = (String)hfcutils.answerFieldProfs(field_name);
  propose("return_field_profs")
  {
    emitDA(#Inform(ResearchField, prof_names={field_profs}, field_name={field_name}));
  }
  lastDAprocessed();
}


/** Rules related to departments */



answer_dept_courses:
/** Provides list of courses for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="CourseList")
{
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  {
    dept_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Department>");
    resolved_all_courses = (String)hfcutils.answerDeptCourseList(dept_resolved_name);
    propose("return_dept_course_list")
    {
      emitDA(#Inform(Department,dept_name={dept_resolved_name}, course_list={resolved_all_courses}));
    }
  }
  else
  {
    dept_name = lastDA().what;
    dept =  new Department;
    dept.name = dept_name;
    all_courses = (String)hfcutils.answerDeptCourseList(dept_name);
    propose("return_dept_course_list")
    {
      emitDA(#Inform(Department,dept_name={dept_name}, course_list={all_courses}));
    }
  }
	lastDAprocessed();
}


answer_dept_profs:
/** Provides list of profs for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="ProfList")
{
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  {
    dept_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Department>");
    resolved_all_profs = (String)hfcutils.answerDeptProfList(dept_resolved_name);
    propose("return_dept_prof_list")
    {
      emitDA(#Inform(Department,dept_name={dept_resolved_name}, prof_list={resolved_all_profs}));
    }
  }
  else
  {
    dept_name = lastDA().what;
    dept =  new Department;
    dept.name = dept_name;
    all_profs = (String)hfcutils.answerDeptProfList(dept_name);
    propose("return_dept_prof_list")
    {
      emitDA(#Inform(Department,dept_name={dept_name}, prof_list={all_profs}));
    }
  }
	lastDAprocessed();
}

answer_dept_programs:
/** Provides list of programs for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="ProgList")
{
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  {
    dept_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Department>");
    resolved_all_programs = (String)hfcutils.answerDeptProgramList(dept_resolved_name);
    propose("return_dept_program_list")
    {
      emitDA(#Inform(Department,dept_name={dept_resolved_name}, program_list={resolved_all_programs}));
    }
  }
  else
  {
    dept_name = lastDA().what;
    dept =  new Department;
    dept.name = dept_name;
    all_programs = (String)hfcutils.answerDeptProgramList(dept_name);
    propose("return_dept_program_list")
    {
      emitDA(#Inform(Department,dept_name={dept_name}, program_list={all_programs}));
    }
  }
	lastDAprocessed();
}

answer_dept_info:
/** Gives overview about a department */
if (lastDA()>= #Request(Department) && lastDA().theme=="DeptInfo")
{
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  {
    dept_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Department>");
    dept_resolved_info = (String)hfcutils.answerDeptInfo(dept_resolved_name);
    propose("return_dept_info")
    {
      emitDA(#Inform(Department,dept_name={dept_resolved_name}, dept_info={dept_resolved_info}));
    }
  }
  else
  {
    dept_name = lastDA().what;
    dept = new Department;
    dept.name = dept_name;
    dept_info = (String)hfcutils.answerDeptInfo(dept_name);
    propose("return_dept_info")
    {
      emitDA(#Inform(Department,dept_name={dept_name}, dept_info={dept_info}));
    }
  }
	lastDAprocessed();
}


answer_dept_num_courses:
/** Provides total number of courses for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="CourseCount")
{ 
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  {
    dept_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Department>");
    resolved_tot_c = (String)hfcutils.answerDeptCourseCount(dept_resolved_name);
    propose("return_course_total")
    {
      emitDA(#Inform(Department,tot_courses={resolved_tot_c}, dept_name={dept_resolved_name}));
    }
  }
  else
  {
    dept_name = lastDA().what;
    dept = new Department;
    dept.name = dept_name;
    tot_c = (String)hfcutils.answerDeptCourseCount(dept_name);
    propose("return_course_total")
    {
      emitDA(#Inform(Department,tot_courses={tot_c}, dept_name={dept_name}));
    }
  }
	lastDAprocessed();
}

answer_dept_facilities:
/** Provides answer on facillities in a department */
if (lastDA()>= #Request(Department) && lastDA().theme=="Facilities")
{
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  {
    dept_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Department>");
    resolved_facilities = (String)hfcutils.answerDeptFacilities(dept_resolved_name);
    propose("return_dept_facilities")
    {
      emitDA(#Inform(Department, dept_name = {dept_resolved_name}, dept_facilities = {resolved_facilities}));
    }
  }
  else
  {
    dept_name = lastDA().what;
    dept = new Department;
    dept.name = dept_name;
    facilities = (String)hfcutils.answerDeptFacilities(dept_name);
    propose("return_dept_facilities")
    {
      emitDA(#Inform(Department, dept_name = {dept_name}, dept_facilities = {facilities}));
    }
  }
  lastDAprocessed();
}

answer_dept_ug_programs:
/** Provides list of UG programs for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="UGProgList")
{
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  {
    dept_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Department>");
    resolved_all_programs = (String)hfcutils.answerDeptUGProgramList(dept_resolved_name);
    propose("return_dept_ug_program_list")
    {
      emitDA(#Inform(Department,dept_name={dept_resolved_name}, ug_program_list={resolved_all_programs}));
    }
  }
  else
  {
    dept_name = lastDA().what;
    dept = new Department;
    dept.name = dept_name;
    all_programs = (String)hfcutils.answerDeptUGProgramList(dept_name);
    propose("return_dept_ug_program_list")
    {
      emitDA(#Inform(Department,dept_name={dept_name}, ug_program_list={all_programs}));
    }
  }
	lastDAprocessed();
}

answer_dept_pg_programs:
/** Provides list of PG programs for the department */
if (lastDA()>= #Request(Department) && lastDA().theme=="PGProgList")
{
  if(lastDA().what == "objectPronoun" || (Boolean)hfcutils.checkObjectPronoun(lastDA().what))
  {
    dept_resolved_name = (String)hfcutils.resolveObjectPronoun("<univ:Department>");
    resolved_all_programs = (String)hfcutils.answerDeptPGProgramList(dept_resolved_name);
    propose("return_dept_ug_program_list")
    {
      emitDA(#Inform(Department,dept_name={dept_resolved_name}, pg_program_list={resolved_all_programs}));
    }
  }
  else
  {
    dept_name = lastDA().what;
    dept = new Department;
    dept.name = dept_name;
    all_programs = (String)hfcutils.answerDeptPGProgramList(dept_name);
    propose("return_dept_pg_program_list")
    {
      emitDA(#Inform(Department,dept_name={dept_name}, pg_program_list={all_programs}));
    }
  }
	lastDAprocessed();
}


// Small Talk Rules

ask_for_name:
if (user && !user.name && !(saidInSession(#WHQuestion(Name)))) {
  propose("ask_name") {
    emitDA(#WHQuestion(Name));
  }
  lastDAprocessed();
}

greet_back:
if (lastDA() >= #InitialGreeting(Greet)) {
  propose("greet back") {
    if (!saidInSession(#Salutation(top)))
      {
        emitDA(#ReturnGreeting(Greet));
      }
    else if(saidInSession(#WHQuestion(Name)))
    {
      emitDA(#Offer(top));
    }

  }
  
  lastDAprocessed();
  user = new User;
}

remember_name:
if (lastDA() >= #Inform(Name)) {
  user.name = lastDA().what;
  lastDAprocessed();
  propose("remember"){
    emitDA(#ReturnGreeting(Greet, name={user.name}));
  }
  propose("firsttime"){
    emitDA(#ReturnGreeting(Greet));
  }
}

proactive_greet:
/** use this timeout exactly once */
if (! hasActiveTimeout("robot_starts") && ! isTimedOut("robot_starts")) {
  timeout("robot_starts", 5000) {
  start_conversation:
    // Salutation is the superclass of Initial-/ReturnGreeting
    if (! (receivedInSession(#Salutation(top))
           || saidInSession(#Salutation(top)))) {
      propose("robot_greets") {
        tod = Date.timeOfDay();
        emitDA(#InitialGreeting(Greet, when={tod}));
      }
    }
  }
}

out_of_input_space:
/** text that is not understood by the bot **/
if(lastDA() >= #OutOfInputSpace(top))
{
  propose("out_of_input_space")
  {
    emitDA(#Inform(OutOfInputSpace));
  }
  lastDAprocessed();

}

ask_user_for_next_query:
/** If user thanks/accepts your information, ask them if they want to know something else **/
if(lastDA() && lastDA() >= #Confirm(top) )
{
  if(!(myLastDA()>= #AutoPositive(top)) && !(myLastDA()>= #ReturnGreeting(Greet)))
  {
    propose("thank_and_ask_for_next_query")
    {
      emitDA(#AutoPositive(top));
    }
  }
  else
  {
    propose("ask_user_for_next_query")
    {
      emitDA(#Offer(top));
    }
  }
  lastDAprocessed();
}

if(lastDA() && lastDA() >= #Disconfirm(top) && (myLastDA()>= #Offer(top) || myLastDA() >= #AutoPositive(top)))
{
  propose("say_goodbye")
  {
    emitDA(#InitialGoodbye(top));
  }
  lastDAprocessed();
}