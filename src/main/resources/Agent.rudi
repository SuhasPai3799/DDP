// all standard Java methods that we should remember
// simply adding functions to be performed on objects here will not work anymore;
// also add them directly to the list of special cases in mem.addFunction
[Object]. boolean equals(Object e);
[String]. boolean startsWith(String s);
[String]. boolean endsWith(String s);
[String]. String substring(int i);
[List<T>]. T get(int a);
[List<T>]. void add(Object a);
[Set<T>]. void add(Object a);
[List<T>]. boolean contains(Object a);
[Set<T>]. boolean contains(Object a);

// all Agent methods we should know

// Rdf(Proxy) methods
Rdf toRdf(String uri);
[Rdf]. String getURI();
[Rdf]. boolean has(String predicate);

RdfClass getRdfClass(String s);
boolean exists(Object o);
// fire off general queries
//List<List<Object>> queryTable(String query, String ... args);
//List<Object> query(String query, String ... args);


// DialogueAct methods
DialogueAct createEmitDA(DialogueAct da);
DialogueAct emitDA(int delay, DialogueAct da);
DialogueAct emitDA(DialogueAct da);
[DialogueAct]. void setProposition(String prop);

// my last outgoing resp. the last incoming dialogue act
DialogueAct myLastDA();
//void myLastDAprocessed();
// did i say something like ta in this session (subsumption)? If so, how many
// utterances back was it? (otherwise, -1 is returned)
int saidInSession(DialogueAct da);

boolean waitingForResponse();

DialogueAct lastDA();
DialogueAct addLastDA(DialogueAct newDA);
void lastDAprocessed();
// like saidInSession, only for incoming dialogue acts
int receivedInSession(DialogueAct da);

void newData();

// Timeout methods
void newTimeout(String name, int millis);
boolean isTimedOut(String name);
void removeTimeout(String name);
boolean hasActiveTimeout(String name);
void cancelTimeout(String name);

String getLanguage();

// Math methods
int random(int limit);
float random();

// logging methods
Logger logger;
void info(String s, int i);

// discarding actions and shutdown
void clearBehavioursAndProposals();
void shutdown();

// lambda
boolean contains(Collection coll, Function<Boolean, Object> pred);
boolean all(Collection coll, Function<Boolean, Object> pred);
List<Object> filter(Collection coll, Function<Boolean, Object> pred);
List<Object> sort(Collection coll, Function<Integer, Object, Object> c);

// all Agent variables we should know

//RdfProxy _proxy;
CommunicationHub _hub;
AsrTts asr;
