/* The following code was generated by JFlex 1.4.3 on 07/06/19 17:26 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2015  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * License: BSD                                                            *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals,
   because the input is read twice and the methods used to parse
   the numbers are not very fast.
   For a production quality application (e.g. a Java compiler)
   this could be optimized */

package de.dfki.mlt.rudimant.compiler.io;

import static de.dfki.mlt.rudimant.common.ErrorInfo.ErrorType.*;

import java.util.*;

import de.dfki.mlt.rudimant.common.Location;
import de.dfki.mlt.rudimant.common.Position;
import de.dfki.mlt.rudimant.compiler.Mem;
import de.dfki.mlt.rudimant.compiler.Token;
import de.dfki.mlt.rudimant.compiler.tree.ExpLiteral;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 07/06/19 17:26 from the specification file
 * <tt>VondaLexer.flex</tt>
 */
public class VondaLexer implements VondaGrammar.Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\60"+
    "\1\24\1\54\1\6\1\54\1\62\1\25\1\54\1\54\1\5\1\61"+
    "\1\54\1\23\1\21\1\4\1\10\1\16\1\64\1\15\1\65\1\17"+
    "\1\70\1\66\1\67\1\11\1\54\1\54\1\57\1\55\1\56\1\54"+
    "\1\0\3\14\1\71\1\22\1\20\5\6\1\12\13\6\1\13\2\6"+
    "\1\54\1\26\1\54\1\54\1\37\1\0\1\32\1\27\1\34\1\45"+
    "\1\31\1\46\1\6\1\53\1\43\1\6\1\33\1\36\1\47\1\35"+
    "\1\41\1\50\1\6\1\30\1\40\1\42\1\44\1\52\1\51\1\13"+
    "\2\6\1\54\1\63\1\54\1\54\41\7\2\0\4\6\4\0\1\6"+
    "\2\0\1\7\7\0\1\6\4\0\1\6\5\0\27\6\1\0\37\6"+
    "\1\0\u01ca\6\4\0\14\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\21\0\160\7\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0"+
    "\3\6\1\0\1\6\1\0\24\6\1\0\123\6\1\0\213\6\1\0"+
    "\5\7\2\0\236\6\11\0\46\6\2\0\1\6\7\0\47\6\7\0"+
    "\1\6\1\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\10\0\33\6\5\0\3\6\15\0\5\7\6\0\1\6\4\0"+
    "\13\7\5\0\53\6\37\7\4\0\2\6\1\7\143\6\1\0\1\6"+
    "\10\7\1\0\6\7\2\6\2\7\1\0\4\7\2\6\12\7\3\6"+
    "\2\0\1\6\17\0\1\7\1\6\1\7\36\6\33\7\2\0\131\6"+
    "\13\7\1\6\16\0\12\7\41\6\11\7\2\6\4\0\1\6\5\0"+
    "\26\6\4\7\1\6\11\7\1\6\3\7\1\6\5\7\22\0\31\6"+
    "\3\7\104\0\1\6\1\0\13\6\67\0\33\7\1\0\4\7\66\6"+
    "\3\7\1\6\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0"+
    "\7\6\1\0\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6"+
    "\1\0\3\6\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7"+
    "\1\0\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7"+
    "\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7"+
    "\3\6\1\7\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6"+
    "\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7"+
    "\1\0\3\7\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0"+
    "\12\7\1\0\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0"+
    "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0"+
    "\2\6\3\0\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0"+
    "\1\6\7\0\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0"+
    "\12\6\1\0\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0"+
    "\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0"+
    "\2\7\7\0\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6"+
    "\17\0\2\7\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6"+
    "\7\7\1\0\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6"+
    "\2\7\2\0\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0"+
    "\30\6\1\0\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0"+
    "\6\7\1\0\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7"+
    "\2\6\7\7\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0"+
    "\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0"+
    "\7\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0"+
    "\4\6\1\7\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0"+
    "\1\6\1\0\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0"+
    "\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0"+
    "\2\7\10\6\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7"+
    "\1\0\44\7\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0"+
    "\6\6\4\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7"+
    "\15\6\14\7\1\6\17\7\2\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6"+
    "\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6"+
    "\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6"+
    "\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6"+
    "\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7"+
    "\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0"+
    "\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6"+
    "\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7\46\0\27\6"+
    "\5\7\4\0\65\6\12\7\1\0\35\7\2\0\13\7\6\0\12\7"+
    "\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\7\21\0"+
    "\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7\14\0"+
    "\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7"+
    "\1\0\25\7\4\6\1\7\4\6\3\7\2\6\11\0\300\6\47\7"+
    "\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0"+
    "\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0"+
    "\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0"+
    "\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\16\0"+
    "\5\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\5\7\5\0"+
    "\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6\25\0"+
    "\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6\2\0"+
    "\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0"+
    "\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6\4\0"+
    "\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0"+
    "\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6\2\0"+
    "\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"+
    "\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0\11\6"+
    "\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7\2\0"+
    "\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6\21\0"+
    "\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6\103\0"+
    "\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6\1\7"+
    "\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0\11\6"+
    "\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0\12\6"+
    "\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6\7\0"+
    "\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7\6\6"+
    "\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7\14\0"+
    "\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0\51\6"+
    "\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0\27\6"+
    "\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6\2\7"+
    "\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6\5\7"+
    "\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6\11\0"+
    "\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0\12\7"+
    "\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0\152\6"+
    "\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6"+
    "\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6"+
    "\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7"+
    "\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6"+
    "\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6"+
    "\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0\6\6"+
    "\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7"+
    "\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\2\3\1\4\2\5\2\3\1\6"+
    "\1\7\14\4\7\3\1\10\2\11\1\12\2\1\2\13"+
    "\1\1\1\2\1\0\1\5\1\14\1\15\1\0\3\5"+
    "\1\16\1\14\1\0\1\14\1\17\1\20\1\21\1\0"+
    "\12\4\1\22\2\4\1\23\6\4\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\3\10\1\35"+
    "\3\34\1\0\4\5\1\14\2\0\6\4\1\36\7\4"+
    "\1\37\5\4\2\0\3\5\1\0\2\4\1\40\1\4"+
    "\1\41\1\4\1\42\1\4\1\43\11\4\3\5\1\0"+
    "\1\44\7\4\1\45\4\4\1\46\3\5\1\0\1\47"+
    "\1\50\1\4\1\51\1\4\1\52\4\4\1\53\3\5"+
    "\1\0\2\4\1\54\1\55\1\4\1\56\1\57\3\5"+
    "\1\0\1\4\1\60\1\4\3\5\1\0\1\4\1\61"+
    "\3\5\1\0\1\62\1\0\3\5\1\0\2\5\1\0"+
    "\2\5\1\0\2\5\1\0\2\5\1\0\2\5\1\0"+
    "\1\5\1\14\1\0\5\14";

  private static int [] zzUnpackAction() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\256\0\u0122\0\256"+
    "\0\u015c\0\u0196\0\u01d0\0\u020a\0\u0244\0\256\0\256\0\u027e"+
    "\0\u02b8\0\u02f2\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e"+
    "\0\u0488\0\u04c2\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e"+
    "\0\u0658\0\u0692\0\u06cc\0\u0706\0\256\0\256\0\u0740\0\u077a"+
    "\0\u07b4\0\256\0\u07ee\0\u0828\0\u0862\0\u089c\0\u08d6\0\256"+
    "\0\u0910\0\u094a\0\u0984\0\u09be\0\256\0\u09f8\0\u0a32\0\256"+
    "\0\256\0\256\0\256\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54"+
    "\0\u0b8e\0\u0bc8\0\u0c02\0\u0c3c\0\u0c76\0\u0cb0\0\u015c\0\u0cea"+
    "\0\u0d24\0\u015c\0\u0d5e\0\u0d98\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80"+
    "\0\256\0\256\0\256\0\256\0\256\0\256\0\256\0\256"+
    "\0\256\0\u0eba\0\u0ef4\0\256\0\256\0\u0f2e\0\u0f68\0\u077a"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u015c\0\u12ce"+
    "\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0\0\u142a\0\u015c\0\u1464"+
    "\0\u149e\0\u14d8\0\u1512\0\u154c\0\u0f68\0\u077a\0\u1586\0\u15c0"+
    "\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u015c\0\u16e2\0\u015c\0\u171c"+
    "\0\u015c\0\u1756\0\u015c\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878"+
    "\0\u18b2\0\u18ec\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48"+
    "\0\u015c\0\u1a82\0\u1abc\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde"+
    "\0\u015c\0\u1c18\0\u1c52\0\u1c8c\0\u1cc6\0\u015c\0\u1d00\0\u1d3a"+
    "\0\u1d74\0\u1dae\0\u015c\0\u1de8\0\u1e22\0\u015c\0\u1e5c\0\u015c"+
    "\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44\0\u015c\0\u1f7e\0\u1fb8\0\u1ff2"+
    "\0\u202c\0\u2066\0\u20a0\0\u015c\0\u015c\0\u20da\0\u015c\0\u015c"+
    "\0\u2114\0\u214e\0\u2188\0\u21c2\0\u21fc\0\u015c\0\u2236\0\u2270"+
    "\0\u22aa\0\u22e4\0\u231e\0\u2358\0\u015c\0\u2392\0\u23cc\0\u2406"+
    "\0\u2440\0\u015c\0\u247a\0\u24b4\0\u24ee\0\256\0\u2528\0\u2562"+
    "\0\u259c\0\u25d6\0\u2610\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732"+
    "\0\u276c\0\u27a6\0\u27e0\0\u281a\0\u2854\0\u288e\0\u28c8\0\u28c8"+
    "\0\u2902\0\u293c\0\u2976\0\u29b0\0\u29ea\0\u2a24";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\2\6\1\7\1\10\1\11\1\4\1\12"+
    "\1\13\3\11\3\13\1\11\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\2\11\1\23\1\24"+
    "\2\11\1\25\1\11\1\26\1\27\1\11\1\30\1\31"+
    "\1\11\1\32\1\33\2\11\1\10\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\5\13\1\11\1\43\1\44"+
    "\1\45\21\43\1\46\1\43\1\47\43\43\1\50\1\51"+
    "\1\52\22\50\1\4\1\53\43\50\74\0\1\6\73\0"+
    "\1\54\1\55\72\0\13\11\1\0\1\11\4\0\25\11"+
    "\10\0\6\11\10\0\1\56\1\57\1\60\1\61\1\0"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\6\0\1\67"+
    "\4\0\1\60\6\0\1\70\1\65\15\0\1\62\2\64"+
    "\1\57\1\64\1\70\10\0\2\13\1\60\2\0\3\13"+
    "\1\65\1\66\1\67\6\0\1\67\4\0\1\60\6\0"+
    "\1\70\1\65\15\0\5\13\1\70\10\0\2\66\3\0"+
    "\3\66\44\0\5\66\24\0\1\71\31\0\1\72\1\73"+
    "\5\0\1\74\13\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\75\23\11\10\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\76\22\11\10\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\7\11\1\77\15\11\10\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\3\11\1\100\6\11"+
    "\1\101\12\11\10\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\102\12\11\1\103\7\11\10\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\22\11\1\104\2\11"+
    "\10\0\6\11\6\0\13\11\1\0\1\11\4\0\1\11"+
    "\1\105\12\11\1\106\10\11\10\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\17\11\1\107\1\110\4\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\2\11\1\111"+
    "\7\11\1\112\12\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\113\6\11\1\114\1\11\1\115"+
    "\10\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\1\11\1\116\13\11\1\117\7\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\24\11\1\120\10\0\6\11"+
    "\55\0\1\121\71\0\1\122\71\0\1\123\71\0\1\124"+
    "\71\0\1\125\3\0\1\126\72\0\1\127\72\0\1\130"+
    "\6\0\1\43\2\0\21\43\1\0\1\43\1\0\43\43"+
    "\2\0\1\45\67\0\2\131\1\0\5\131\1\132\4\131"+
    "\2\132\1\133\4\131\5\134\4\131\1\134\4\131\1\134"+
    "\3\131\1\134\15\131\1\132\2\133\1\131\1\133\1\131"+
    "\25\0\1\135\46\0\1\52\67\0\2\131\1\0\5\131"+
    "\1\136\4\131\2\136\1\137\4\131\5\140\4\131\1\140"+
    "\4\131\1\140\3\131\1\140\15\131\1\136\2\137\1\131"+
    "\1\137\1\131\1\54\1\5\1\6\67\54\5\55\1\141"+
    "\64\55\10\0\1\56\1\57\1\60\2\0\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\6\0\1\67\4\0\1\60"+
    "\6\0\1\70\1\65\15\0\1\62\2\64\1\57\1\64"+
    "\1\70\10\0\2\57\3\0\3\57\1\65\1\66\1\67"+
    "\6\0\1\67\13\0\1\70\1\65\15\0\5\57\1\70"+
    "\10\0\1\142\1\143\2\0\5\143\1\0\1\143\4\0"+
    "\1\143\1\0\2\143\1\0\1\143\10\0\2\143\15\0"+
    "\6\143\10\0\1\144\1\57\1\60\2\0\3\144\1\65"+
    "\1\66\1\67\6\0\1\67\4\0\1\60\6\0\1\70"+
    "\1\65\15\0\3\144\1\57\1\144\1\70\10\0\1\64"+
    "\1\57\1\60\2\0\3\64\1\65\1\66\1\67\6\0"+
    "\1\67\4\0\1\60\6\0\1\70\1\65\15\0\3\64"+
    "\1\57\1\64\1\70\10\0\1\145\1\57\1\60\2\0"+
    "\3\145\1\65\1\66\1\67\6\0\1\67\4\0\1\60"+
    "\6\0\1\70\1\65\15\0\3\145\1\57\1\145\1\70"+
    "\10\0\2\66\3\0\3\66\1\65\1\0\1\67\6\0"+
    "\1\67\13\0\1\70\1\65\15\0\5\66\1\70\10\0"+
    "\2\146\3\0\3\146\3\0\1\147\35\0\1\147\2\0"+
    "\5\146\17\0\1\150\61\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\151\22\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\13\11\1\152\11\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\153\13\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\6\11\1\154"+
    "\2\11\1\155\13\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\6\11\1\156\16\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\22\11\1\157\2\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\7\11\1\160"+
    "\15\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\14\11\1\161\10\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\162\7\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\20\11\1\163\4\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\21\11\1\164"+
    "\3\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\17\11\1\165\5\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\166\15\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\11\1\167\23\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\6\11\1\170"+
    "\16\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\171\1\11\1\172\10\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\1\173\24\11\10\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\14\11\1\174\10\11"+
    "\10\0\6\11\10\0\1\133\4\0\3\133\44\0\3\133"+
    "\1\0\1\133\11\0\1\134\4\0\3\134\44\0\3\134"+
    "\1\0\1\134\11\0\1\175\4\0\3\175\5\0\1\135"+
    "\36\0\3\175\1\0\1\175\11\0\1\176\4\0\3\176"+
    "\5\0\1\135\36\0\3\176\1\0\1\176\1\0\4\55"+
    "\1\6\1\141\64\55\10\0\1\142\1\143\1\60\1\0"+
    "\5\143\1\0\1\143\4\0\1\143\1\0\2\143\1\0"+
    "\1\143\1\0\1\60\6\0\2\143\15\0\6\143\10\0"+
    "\2\177\1\60\1\0\5\177\1\0\1\177\4\0\1\177"+
    "\1\0\2\177\1\0\1\177\1\0\1\60\6\0\2\177"+
    "\15\0\6\177\10\0\1\200\1\57\1\60\2\0\3\200"+
    "\1\65\1\66\1\67\6\0\1\67\4\0\1\60\6\0"+
    "\1\70\1\65\15\0\3\200\1\57\1\200\1\70\10\0"+
    "\1\201\1\57\1\60\2\0\3\201\1\65\1\66\1\67"+
    "\6\0\1\67\4\0\1\60\6\0\1\70\1\65\15\0"+
    "\3\201\1\57\1\201\1\70\10\0\2\146\3\0\3\146"+
    "\1\65\24\0\1\70\1\65\15\0\5\146\1\70\10\0"+
    "\2\146\3\0\3\146\44\0\5\146\66\0\1\202\12\0"+
    "\13\11\1\0\1\11\4\0\3\11\1\203\21\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\15\11\1\204"+
    "\7\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\2\11\1\205\22\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\5\11\1\206\17\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\207\22\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\13\11\1\210"+
    "\11\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\211\15\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\13\11\1\212\11\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\213\22\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\2\11\1\214"+
    "\22\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\12\11\1\215\12\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\3\11\1\216\21\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\11\11\1\162\13\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\3\11\1\217"+
    "\21\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\13\11\1\220\5\11\1\221\3\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\23\11\1\222\1\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\7\11\1\223"+
    "\15\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\7\11\1\224\15\11\10\0\6\11\10\0\2\225\1\60"+
    "\1\0\5\225\1\0\1\225\4\0\1\225\1\0\2\225"+
    "\1\0\1\225\1\0\1\60\6\0\2\225\15\0\6\225"+
    "\10\0\1\226\1\57\1\60\2\0\3\226\1\65\1\66"+
    "\1\67\6\0\1\67\4\0\1\60\6\0\1\70\1\65"+
    "\15\0\3\226\1\57\1\226\1\70\10\0\1\227\1\57"+
    "\1\60\2\0\3\227\1\65\1\66\1\67\6\0\1\67"+
    "\4\0\1\60\6\0\1\70\1\65\15\0\3\227\1\57"+
    "\1\227\1\70\66\0\1\230\11\0\13\11\1\0\1\11"+
    "\4\0\4\11\1\231\20\11\10\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\1\11\1\232\23\11\10\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\2\11\1\233\22\11"+
    "\10\0\6\11\6\0\13\11\1\0\1\11\4\0\14\11"+
    "\1\234\10\11\10\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\235\17\11\10\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\12\11\1\236\12\11\10\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\1\11\1\237\23\11"+
    "\10\0\6\11\6\0\13\11\1\0\1\11\4\0\15\11"+
    "\1\240\7\11\10\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\7\11\1\241\15\11\10\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\242\22\11\10\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\12\11\1\243\12\11"+
    "\10\0\6\11\6\0\13\11\1\0\1\11\4\0\3\11"+
    "\1\244\21\11\10\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\14\11\1\245\10\11\10\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\2\11\1\246\22\11\10\0\6\11"+
    "\10\0\2\247\1\60\1\0\5\247\1\0\1\247\4\0"+
    "\1\247\1\0\2\247\1\0\1\247\1\0\1\60\6\0"+
    "\2\247\15\0\6\247\10\0\1\250\1\57\1\60\2\0"+
    "\3\250\1\65\1\66\1\67\6\0\1\67\4\0\1\60"+
    "\6\0\1\70\1\65\15\0\3\250\1\57\1\250\1\70"+
    "\10\0\1\251\1\57\1\60\2\0\3\251\1\65\1\66"+
    "\1\67\6\0\1\67\4\0\1\60\6\0\1\70\1\65"+
    "\15\0\3\251\1\57\1\251\1\70\65\0\1\252\12\0"+
    "\13\11\1\0\1\11\4\0\6\11\1\253\16\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\7\11\1\254"+
    "\15\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\6\11\1\255\16\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\24\11\1\256\10\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\15\11\1\257\7\11\10\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\260\11\11"+
    "\10\0\6\11\6\0\13\11\1\0\1\11\4\0\7\11"+
    "\1\261\15\11\10\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\5\11\1\262\17\11\10\0\6\11\6\0\13\11"+
    "\1\0\1\11\4\0\11\11\1\263\13\11\10\0\6\11"+
    "\6\0\13\11\1\0\1\11\4\0\13\11\1\264\11\11"+
    "\10\0\6\11\6\0\13\11\1\0\1\11\4\0\5\11"+
    "\1\265\17\11\10\0\6\11\10\0\2\266\1\60\1\0"+
    "\5\266\1\0\1\266\4\0\1\266\1\0\2\266\1\0"+
    "\1\266\1\0\1\60\6\0\2\266\15\0\6\266\10\0"+
    "\1\267\1\57\1\60\2\0\3\267\1\65\1\66\1\67"+
    "\6\0\1\67\4\0\1\60\6\0\1\70\1\65\15\0"+
    "\3\267\1\57\1\267\1\70\10\0\1\270\1\57\1\60"+
    "\2\0\3\270\1\65\1\66\1\67\6\0\1\67\4\0"+
    "\1\60\6\0\1\70\1\65\15\0\3\270\1\57\1\270"+
    "\1\70\67\0\1\271\10\0\13\11\1\0\1\11\4\0"+
    "\10\11\1\272\14\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\15\11\1\273\7\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\13\11\1\274\11\11\10\0"+
    "\6\11\6\0\13\11\1\0\1\11\4\0\13\11\1\275"+
    "\11\11\10\0\6\11\6\0\13\11\1\0\1\11\4\0"+
    "\13\11\1\276\11\11\10\0\6\11\6\0\13\11\1\0"+
    "\1\11\4\0\2\11\1\277\22\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\2\11\1\300\22\11\10\0"+
    "\6\11\10\0\2\301\1\60\1\0\5\301\1\0\1\301"+
    "\4\0\1\301\1\0\2\301\1\0\1\301\1\0\1\60"+
    "\6\0\2\301\15\0\6\301\10\0\1\302\1\57\1\60"+
    "\2\0\3\302\1\65\1\66\1\67\6\0\1\67\4\0"+
    "\1\60\6\0\1\70\1\65\15\0\3\302\1\57\1\302"+
    "\1\70\10\0\1\303\1\57\1\60\2\0\3\303\1\65"+
    "\1\66\1\67\6\0\1\67\4\0\1\60\6\0\1\70"+
    "\1\65\15\0\3\303\1\57\1\303\1\70\15\0\1\304"+
    "\62\0\13\11\1\0\1\11\4\0\3\11\1\305\21\11"+
    "\10\0\6\11\6\0\13\11\1\0\1\11\4\0\2\11"+
    "\1\306\22\11\10\0\6\11\6\0\13\11\1\0\1\11"+
    "\4\0\2\11\1\307\22\11\10\0\6\11\10\0\2\310"+
    "\1\60\1\0\5\310\1\0\1\310\4\0\1\310\1\0"+
    "\2\310\1\0\1\310\1\0\1\60\6\0\2\310\15\0"+
    "\6\310\10\0\1\311\1\57\1\60\2\0\3\311\1\65"+
    "\1\66\1\67\6\0\1\67\4\0\1\60\6\0\1\70"+
    "\1\65\15\0\3\311\1\57\1\311\1\70\10\0\1\312"+
    "\1\57\1\60\2\0\3\312\1\65\1\66\1\67\6\0"+
    "\1\67\4\0\1\60\6\0\1\70\1\65\15\0\3\312"+
    "\1\57\1\312\1\70\70\0\1\313\7\0\13\11\1\0"+
    "\1\11\4\0\7\11\1\314\15\11\10\0\6\11\6\0"+
    "\13\11\1\0\1\11\4\0\16\11\1\315\6\11\10\0"+
    "\6\11\10\0\2\316\1\60\1\0\5\316\1\0\1\316"+
    "\4\0\1\316\1\0\2\316\1\0\1\316\1\0\1\60"+
    "\6\0\2\316\15\0\6\316\10\0\1\317\1\57\1\60"+
    "\2\0\3\317\1\65\1\66\1\67\6\0\1\67\4\0"+
    "\1\60\6\0\1\70\1\65\15\0\3\317\1\57\1\317"+
    "\1\70\10\0\1\320\1\57\1\60\2\0\3\320\1\65"+
    "\1\66\1\67\6\0\1\67\4\0\1\60\6\0\1\70"+
    "\1\65\15\0\3\320\1\57\1\320\1\70\65\0\1\321"+
    "\12\0\13\11\1\0\1\11\4\0\7\11\1\322\15\11"+
    "\10\0\6\11\10\0\2\323\1\60\1\0\5\323\1\0"+
    "\1\323\4\0\1\323\1\0\2\323\1\0\1\323\1\0"+
    "\1\60\6\0\2\323\15\0\6\323\10\0\1\324\1\57"+
    "\1\60\2\0\3\324\1\65\1\66\1\67\6\0\1\67"+
    "\4\0\1\60\6\0\1\70\1\65\15\0\3\324\1\57"+
    "\1\324\1\70\10\0\1\325\1\57\1\60\2\0\3\325"+
    "\1\65\1\66\1\67\6\0\1\67\4\0\1\60\6\0"+
    "\1\70\1\65\15\0\3\325\1\57\1\325\1\70\67\0"+
    "\1\326\12\0\2\327\1\60\1\0\5\327\1\0\1\327"+
    "\4\0\1\327\1\0\2\327\1\0\1\327\1\0\1\60"+
    "\6\0\2\327\15\0\6\327\10\0\1\330\1\57\1\60"+
    "\2\0\3\330\1\65\1\66\1\67\6\0\1\67\4\0"+
    "\1\60\6\0\1\70\1\65\15\0\3\330\1\57\1\330"+
    "\1\70\10\0\1\331\1\57\1\60\2\0\3\331\1\65"+
    "\1\66\1\67\6\0\1\67\4\0\1\60\6\0\1\70"+
    "\1\65\15\0\3\331\1\57\1\331\1\70\10\0\2\332"+
    "\1\60\1\0\5\332\1\0\1\332\4\0\1\332\1\0"+
    "\2\332\1\0\1\332\1\0\1\60\6\0\2\332\15\0"+
    "\6\332\10\0\1\333\1\57\1\60\2\0\3\333\1\65"+
    "\1\66\1\67\6\0\1\67\4\0\1\60\6\0\1\70"+
    "\1\65\15\0\3\333\1\57\1\333\1\70\10\0\1\334"+
    "\1\57\1\60\2\0\3\334\1\65\1\66\1\67\6\0"+
    "\1\67\4\0\1\60\6\0\1\70\1\65\15\0\3\334"+
    "\1\57\1\334\1\70\10\0\2\335\1\60\1\0\5\335"+
    "\1\0\1\335\4\0\1\335\1\0\2\335\1\0\1\335"+
    "\1\0\1\60\6\0\2\335\15\0\6\335\10\0\1\336"+
    "\1\57\1\60\2\0\3\336\1\65\1\66\1\67\6\0"+
    "\1\67\4\0\1\60\6\0\1\70\1\65\15\0\3\336"+
    "\1\57\1\336\1\70\10\0\1\337\1\57\1\60\2\0"+
    "\3\337\1\65\1\66\1\67\6\0\1\67\4\0\1\60"+
    "\6\0\1\70\1\65\15\0\3\337\1\57\1\337\1\70"+
    "\10\0\2\340\1\60\1\0\5\340\1\0\1\340\4\0"+
    "\1\340\1\0\2\340\1\0\1\340\1\0\1\60\6\0"+
    "\2\340\15\0\6\340\10\0\1\341\1\57\1\60\2\0"+
    "\3\341\1\65\1\66\1\67\6\0\1\67\4\0\1\60"+
    "\6\0\1\70\1\65\15\0\3\341\1\57\1\341\1\70"+
    "\10\0\1\342\1\57\1\60\2\0\3\342\1\65\1\66"+
    "\1\67\6\0\1\67\4\0\1\60\6\0\1\70\1\65"+
    "\15\0\3\342\1\57\1\342\1\70\10\0\2\343\1\60"+
    "\1\0\5\343\1\0\1\343\4\0\1\343\1\0\2\343"+
    "\1\0\1\343\1\0\1\60\6\0\2\343\15\0\6\343"+
    "\10\0\1\344\1\57\1\60\2\0\3\344\1\65\1\66"+
    "\1\67\6\0\1\67\4\0\1\60\6\0\1\70\1\65"+
    "\15\0\3\344\1\57\1\344\1\70\10\0\1\345\1\57"+
    "\1\60\2\0\3\345\1\65\1\66\1\67\6\0\1\67"+
    "\4\0\1\60\6\0\1\70\1\65\15\0\3\345\1\57"+
    "\1\345\1\70\10\0\2\346\1\60\1\0\5\346\1\0"+
    "\1\346\4\0\1\346\1\0\2\346\1\0\1\346\1\0"+
    "\1\60\6\0\2\346\15\0\6\346\10\0\1\347\1\57"+
    "\1\60\2\0\3\347\1\65\1\66\1\67\6\0\1\67"+
    "\4\0\1\60\6\0\1\70\1\65\15\0\3\347\1\57"+
    "\1\347\1\70\10\0\1\350\1\57\1\60\2\0\3\350"+
    "\1\65\1\66\1\67\6\0\1\67\4\0\1\60\6\0"+
    "\1\70\1\65\15\0\3\350\1\57\1\350\1\70\10\0"+
    "\2\351\1\60\1\0\5\351\1\0\1\351\4\0\1\351"+
    "\1\0\2\351\1\0\1\351\1\0\1\60\6\0\2\351"+
    "\15\0\6\351\10\0\1\352\1\57\1\60\2\0\3\352"+
    "\1\65\1\66\1\67\6\0\1\67\4\0\1\60\6\0"+
    "\1\70\1\65\15\0\3\352\1\57\1\352\1\70\12\0"+
    "\1\60\23\0\1\60\43\0\1\353\1\57\1\60\2\0"+
    "\3\353\1\65\1\66\1\67\6\0\1\67\4\0\1\60"+
    "\6\0\1\70\1\65\15\0\3\353\1\57\1\353\1\70"+
    "\10\0\1\354\1\57\1\60\2\0\3\354\1\65\1\66"+
    "\1\67\6\0\1\67\4\0\1\60\6\0\1\70\1\65"+
    "\15\0\3\354\1\57\1\354\1\70\10\0\1\355\1\57"+
    "\1\60\2\0\3\355\1\65\1\66\1\67\6\0\1\67"+
    "\4\0\1\60\6\0\1\70\1\65\15\0\3\355\1\57"+
    "\1\355\1\70\10\0\1\356\1\57\1\60\2\0\3\356"+
    "\1\65\1\66\1\67\6\0\1\67\4\0\1\60\6\0"+
    "\1\70\1\65\15\0\3\356\1\57\1\356\1\70\10\0"+
    "\2\57\1\60\2\0\3\57\1\65\1\66\1\67\6\0"+
    "\1\67\4\0\1\60\6\0\1\70\1\65\15\0\5\57"+
    "\1\70";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10846];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\1\1\1\11\5\1\2\11"+
    "\25\1\2\11\3\1\1\11\2\1\1\0\2\1\1\11"+
    "\1\0\3\1\1\11\1\1\1\0\4\11\1\0\24\1"+
    "\11\11\2\1\2\11\3\1\1\0\5\1\2\0\24\1"+
    "\2\0\3\1\1\0\25\1\1\0\21\1\1\0\16\1"+
    "\1\0\12\1\1\0\6\1\1\0\5\1\1\0\1\1"+
    "\1\0\2\1\1\11\1\0\2\1\1\0\2\1\1\0"+
    "\2\1\1\0\2\1\1\0\2\1\1\0\2\1\1\0"+
    "\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private static final Logger logger = LoggerFactory.getLogger(VondaLexer.class);

  private String origin;

  private Mem mem;

  private Object yylval;
  private StringBuffer string = new StringBuffer();
  private Position sstart;

  private LinkedList<Token> commentTokens = new LinkedList<>();

  private LinkedList<Token> tokens = new LinkedList<>();

  private int charLiteral(String charval) {
    yylval = new ExpLiteral(charval, "char");
    tokens.add(new Token('\'' + charval, sstart, getEndPos()));
    return VondaGrammar.Lexer.OTHER_LITERAL;
  }

  private int intLiteral(String intval) {
    yylval = new ExpLiteral(intval, "int");
    return token(VondaGrammar.Lexer.INT);
  }

  private int longLiteral(String longval) {
    yylval = new ExpLiteral(longval, "long");
    return token(VondaGrammar.Lexer.OTHER_LITERAL);
  }

  private int floatLiteral(String floatval) {
    yylval = new ExpLiteral(floatval, "float");
    return token(VondaGrammar.Lexer.OTHER_LITERAL);
  }

  private int doubleLiteral(String doubleval) {
    yylval = new ExpLiteral(doubleval, "double");
    return token(VondaGrammar.Lexer.OTHER_LITERAL);
  }

  private int booleanLiteral(String boolval) {
    yylval = new ExpLiteral(boolval, "boolean");
    return token(VondaGrammar.Lexer.BOOL_LITERAL);
  }

  /**
   * Method to retrieve the beginning position of the last scanned token.
   * @return the position at which the last scanned token starts.
   */
  public Position getStartPos() {
    return new Position(yyline, yycolumn, yychar, origin);
  }

  /**
   * Method to retrieve the ending position of the last scanned token.
   * @return the first position beyond the last scanned token.
   */
  public Position getEndPos() {
    int len = yylength();
    return new Position(yyline, yycolumn + len, yychar + len, origin);
  }

  /**
   * Method to retrieve the semantic value of the last scanned token.
   * @return the semantic value of the last scanned token.
   */
  public Object getLVal() {
    Object result = yylval;
    yylval = null;
    return result;
  }

  /**
   * Entry point for the scanner.  Returns the token identifier corresponding
   * to the next token and prepares to return the semantic value
   * and beginning/ending positions of the token.
   *
   * This is a wrapper around the internal yylex method to collect tokens such
   * as comments, whitespace, etc. to use them later on in the compiler's
   * output. Also, other necessary functionality can be put her (extracting
   * the full input text?)
   *
   * @return the token identifier corresponding to the next token.
   */
  public int yylex() throws java.io.IOException {
    int result = yylex_internal();
    return result;
  }

  /**
   * Entry point for error reporting.  Emits an error
   * referring to the given location in a user-defined way.
   *
   * @param loc The location of the element to which the
   *                error message is related
   * @param msg The string for the error message.
   */
  public void yyerror (VondaGrammar.Location loc, String msg) {
    logger.error("{}: {}", loc, msg);
    mem.registerError(msg, new Location(loc.begin, loc.end), PARSE_ERROR);
  }

  public void setOrigin(String s) { origin = s; }

  public void setMem(Mem m) { mem = m; }

  /** Return the collected tokens */
  public LinkedList<Token> getTokens() { return tokens; }

  /** Return the collected comment tokens */
  public LinkedList<Token> getCommentTokens() { return commentTokens; }

  /** Add a non-comment and non-whitespace token */
  public int token(int token) {
    tokens.add(new Token(yytext(), getStartPos(), getEndPos()));
    return token;
  }

  /** Add a comment or whitespace token */
  public void addComment(String comment) {
    commentTokens.add(new Token(comment, getStartPos(), getEndPos()));
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public VondaLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public VondaLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2282) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex_internal() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 46: 
          { return token(VondaGrammar.Lexer.PROPOSE);
          }
        case 51: break;
        case 19: 
          { return token(VondaGrammar.Lexer.DO);
          }
        case 52: break;
        case 6: 
          { sstart = getStartPos(); string.setLength(0); yybegin(STRING);
          }
        case 53: break;
        case 7: 
          { sstart = getStartPos(); yybegin(CHARLITERAL);
          }
        case 54: break;
        case 40: 
          { return token(VondaGrammar.Lexer.CANCEL);
          }
        case 55: break;
        case 27: 
          { return token(VondaGrammar.Lexer.OROR);
          }
        case 56: break;
        case 18: 
          { return token(VondaGrammar.Lexer.IF);
          }
        case 57: break;
        case 43: 
          { return token(VondaGrammar.Lexer.PUBLIC);
          }
        case 58: break;
        case 50: 
          { return token(VondaGrammar.Lexer.CANCEL_ALL);
          }
        case 59: break;
        case 20: 
          { return token(VondaGrammar.Lexer.EQEQ);
          }
        case 60: break;
        case 34: 
          { return token(VondaGrammar.Lexer.NULL);
          }
        case 61: break;
        case 29: 
          { yybegin(YYINITIAL); return charLiteral('\'' + yytext());
          }
        case 62: break;
        case 14: 
          { return floatLiteral(yytext());
          }
        case 63: break;
        case 35: 
          { return booleanLiteral(yytext());
          }
        case 64: break;
        case 47: 
          { return token(VondaGrammar.Lexer.PRIVATE);
          }
        case 65: break;
        case 37: 
          { return token(VondaGrammar.Lexer.FINAL);
          }
        case 66: break;
        case 17: 
          { return token(VondaGrammar.Lexer.ARROW);
          }
        case 67: break;
        case 16: 
          { return token(VondaGrammar.Lexer.MINUSEQ);
          }
        case 68: break;
        case 9: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 69: break;
        case 21: 
          { return token(VondaGrammar.Lexer.GTEQ);
          }
        case 70: break;
        case 48: 
          { return token(VondaGrammar.Lexer.CONTINUE);
          }
        case 71: break;
        case 44: 
          { return token(VondaGrammar.Lexer.TIMEOUT);
          }
        case 72: break;
        case 49: 
          { return token(VondaGrammar.Lexer.PROTECTED);
          }
        case 73: break;
        case 31: 
          { return token(VondaGrammar.Lexer.FOR);
          }
        case 74: break;
        case 4: 
          { yylval = yytext();
  return token(VondaGrammar.Lexer.VARIABLE);
          }
        case 75: break;
        case 3: 
          { return token((int)yycharat(0));
          }
        case 76: break;
        case 39: 
          { return token(VondaGrammar.Lexer.RETURN);
          }
        case 77: break;
        case 36: 
          { return token(VondaGrammar.Lexer.BREAK);
          }
        case 78: break;
        case 38: 
          { return token(VondaGrammar.Lexer.WHILE);
          }
        case 79: break;
        case 30: 
          { return token(VondaGrammar.Lexer.NEW);
          }
        case 80: break;
        case 5: 
          { return intLiteral(yytext());
          }
        case 81: break;
        case 33: 
          { return token(VondaGrammar.Lexer.CASE);
          }
        case 82: break;
        case 32: 
          { return token(VondaGrammar.Lexer.ELSE);
          }
        case 83: break;
        case 42: 
          { return token(VondaGrammar.Lexer.IMPORT);
          }
        case 84: break;
        case 11: 
          { throw new RuntimeException("Unterminated character literal at end of line");
          }
        case 85: break;
        case 24: 
          { return token(VondaGrammar.Lexer.PLUSEQ);
          }
        case 86: break;
        case 41: 
          { return token(VondaGrammar.Lexer.SWITCH);
          }
        case 87: break;
        case 15: 
          { return token(VondaGrammar.Lexer.MINUSMINUS);
          }
        case 88: break;
        case 2: 
          { addComment(yytext());
          }
        case 89: break;
        case 45: 
          { return token(VondaGrammar.Lexer.DEFAULT);
          }
        case 90: break;
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
          }
        case 91: break;
        case 23: 
          { return token(VondaGrammar.Lexer.NOTEQ);
          }
        case 92: break;
        case 13: 
          { return longLiteral(yytext());
          }
        case 93: break;
        case 10: 
          { yybegin(YYINITIAL);
  String s = string.toString();
  yylval = new ExpLiteral(s, "String");
  tokens.add(new Token('"' + s + '"', sstart, getEndPos()));
  return VondaGrammar.Lexer.STRING;
          }
        case 94: break;
        case 25: 
          { return token(VondaGrammar.Lexer.PLUSPLUS);
          }
        case 95: break;
        case 26: 
          { return token(VondaGrammar.Lexer.ANDAND);
          }
        case 96: break;
        case 8: 
          { string.append( yytext() );
          }
        case 97: break;
        case 22: 
          { return token(VondaGrammar.Lexer.LTEQ);
          }
        case 98: break;
        case 28: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 99: break;
        case 12: 
          { return doubleLiteral(yytext());
          }
        case 100: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return VondaGrammar.Lexer.EOF;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
