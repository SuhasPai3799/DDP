State 24 conflicts: 1 shift/reduce
State 89 conflicts: 2 shift/reduce
State 92 conflicts: 2 shift/reduce
State 95 conflicts: 1 shift/reduce
State 96 conflicts: 1 shift/reduce
State 101 conflicts: 1 shift/reduce
State 116 conflicts: 1 shift/reduce
State 123 conflicts: 1 shift/reduce, 1 reduce/reduce
State 198 conflicts: 3 shift/reduce, 1 reduce/reduce
State 207 conflicts: 1 shift/reduce
State 247 conflicts: 1 shift/reduce
State 300 conflicts: 1 shift/reduce
State 323 conflicts: 1 shift/reduce
State 357 conflicts: 1 shift/reduce


Grammar

    0 $accept: grammar_file $end

    1 grammar_file: visibility_spec method_declaration grammar_file
    2             | method_declaration grammar_file
    3             | statement grammar_file
    4             | imports grammar_file
    5             | visibility_spec var_def grammar_file
    6             | %empty

    7 visibility_spec: PUBLIC
    8                | PROTECTED
    9                | PRIVATE

   10 imports: IMPORT VARIABLE path ';'

   11 path: %empty
   12     | '.' VARIABLE path

   13 statement: block
   14          | exp ';'
   15          | grammar_rule
   16          | set_operation
   17          | return_statement
   18          | propose_statement
   19          | timeout_statement
   20          | timeout_behaviour_statement
   21          | if_statement
   22          | while_statement
   23          | for_statement
   24          | switch_statement

   25 blk_statement: statement
   26              | var_def

   27 block: '{' statements '}'
   28      | '{' '}'

   29 statements: blk_statement
   30           | blk_statement statements

   31 grammar_rule: VARIABLE ':' if_statement

   32 return_statement: RETURN ';'
   33                 | RETURN exp ';'
   34                 | BREAK ';'
   35                 | BREAK VARIABLE ';'
   36                 | CANCEL ';'
   37                 | CANCEL_ALL ';'
   38                 | CONTINUE ';'

   39 if_statement: IF '(' exp ')' statement
   40             | IF '(' exp ')' statement ELSE statement

   41 while_statement: WHILE '(' exp ')' statement
   42                | DO statement WHILE '(' exp ')'

   43 for_statement: FOR '(' var_def exp ';' exp ')' statement
   44              | FOR '(' var_def ';' exp ')' statement
   45              | FOR '(' var_def exp ';' ')' statement
   46              | FOR '(' var_def ';' ')' statement
   47              | FOR '(' ';' exp ';' exp ')' statement
   48              | FOR '(' VARIABLE ':' exp ')' statement
   49              | FOR '(' type_spec VARIABLE ':' exp ')' statement

   50 propose_statement: PROPOSE '(' exp ')' block

   51 timeout_behaviour_statement: TIMEOUT_BEHAVIOUR '(' exp ')' block

   52 timeout_statement: TIMEOUT '(' exp ',' exp ')' block

   53 switch_statement: SWITCH '(' exp ')' '{' switch_block '}'

   54 switch_block: switch_labels switch_cont

   55 switch_cont: statements switch_labels switch_cont
   56            | %empty

   57 switch_labels: switch_label switch_labels
   58              | switch_label

   59 switch_label: CASE STRING ':'
   60             | CASE INT ':'
   61             | CASE VARIABLE ':'
   62             | DEFAULT ':'

   63 var_def: FINAL VARIABLE assgn_exp ';'
   64        | type_spec VARIABLE assgn_exp ';'
   65        | FINAL type_spec VARIABLE assgn_exp ';'

   66 assgn_exp: '=' exp
   67          | '=' '{' '}'
   68          | '=' '{' nonempty_exp_list '}'

   69 nonempty_exp_list: exp
   70                  | exp ',' nonempty_exp_list

   71 method_declaration: class_spec type_spec VARIABLE '(' ')' opt_block
   72                   | class_spec type_spec VARIABLE '(' args_list opt_block
   73                   | class_spec VARIABLE '(' ')' opt_block
   74                   | class_spec VARIABLE '(' args_list opt_block
   75                   | type_spec VARIABLE '(' ')' opt_block
   76                   | type_spec VARIABLE '(' args_list opt_block
   77                   | VARIABLE '(' ')' block
   78                   | VARIABLE '(' args_list block

   79 class_spec: '[' type_spec '.' ']'

   80 opt_block: block
   81          | ';'

   82 args_list: VARIABLE ')'
   83          | type_spec VARIABLE ')'
   84          | VARIABLE ',' args_list
   85          | type_spec VARIABLE ',' args_list

   86 set_operation: VARIABLE PLUSEQ exp ';'
   87              | VARIABLE MINUSEQ exp ';'
   88              | ArrayAccess PLUSEQ exp ';'
   89              | ArrayAccess MINUSEQ exp ';'
   90              | field_access PLUSEQ exp ';'
   91              | field_access MINUSEQ exp ';'

   92 function_call: VARIABLE '(' ')'
   93              | VARIABLE '(' nonempty_args_list ')'

   94 nonempty_args_list: exp
   95                   | lambda_exp
   96                   | exp ',' nonempty_args_list
   97                   | lambda_exp ',' nonempty_args_list

   98 type_spec: VARIABLE '[' ']'
   99          | VARIABLE
  100          | parameterized_type

  101 parameterized_type: VARIABLE '<' type_spec_list '>'

  102 type_spec_list: type_spec
  103               | type_spec ',' type_spec_list

  104 exp: if_exp
  105    | assignment
  106    | ConditionalOrExpression
  107    | dialogueact_exp

  108 ConditionalOrExpression: ConditionalOrExpression OROR ConditionalAndExpression
  109                        | ConditionalAndExpression

  110 ConditionalAndExpression: ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | InclusiveOrExpression

  112 InclusiveOrExpression: ExclusiveOrExpression
  113                      | InclusiveOrExpression '|' ExclusiveOrExpression

  114 ExclusiveOrExpression: AndExpression
  115                      | ExclusiveOrExpression '^' AndExpression

  116 AndExpression: EqualityExpression
  117              | AndExpression '&' EqualityExpression

  118 EqualityExpression: RelationalExpression
  119                   | EqualityExpression EQEQ RelationalExpression
  120                   | EqualityExpression NOTEQ RelationalExpression

  121 RelationalExpression: AdditiveExpression
  122                     | RelationalExpression '<' AdditiveExpression
  123                     | RelationalExpression '>' AdditiveExpression
  124                     | RelationalExpression GTEQ AdditiveExpression
  125                     | RelationalExpression LTEQ AdditiveExpression

  126 AdditiveExpression: MultiplicativeExpression
  127                   | AdditiveExpression '+' MultiplicativeExpression
  128                   | AdditiveExpression '-' MultiplicativeExpression

  129 MultiplicativeExpression: CastExpression
  130                         | MultiplicativeExpression '*' CastExpression
  131                         | MultiplicativeExpression '/' CastExpression
  132                         | MultiplicativeExpression '%' CastExpression

  133 CastExpression: UnaryExpression
  134               | '(' type_spec ')' CastExpression

  135 LogicalUnaryExpression: PostfixExpression
  136                       | '!' UnaryExpression
  137                       | '~' UnaryExpression

  138 UnaryExpression: PLUSPLUS UnaryExpression
  139                | MINUSMINUS UnaryExpression
  140                | '+' CastExpression
  141                | '-' CastExpression
  142                | LogicalUnaryExpression

  143 PostfixExpression: PrimaryExpression

  144 PrimaryExpression: NULL
  145                  | NotJustName
  146                  | ComplexPrimary

  147 NotJustName: VARIABLE
  148            | new_exp

  149 ComplexPrimary: '(' exp ')'
  150               | ComplexPrimaryNoParenthesis

  151 ComplexPrimaryNoParenthesis: Literal
  152                            | ArrayAccess
  153                            | field_access
  154                            | function_call

  155 Literal: STRING
  156        | INT
  157        | OTHER_LITERAL

  158 ArrayAccess: VARIABLE '[' exp ']'
  159            | ComplexPrimary '[' exp ']'

  160 if_exp: exp '?' exp ':' exp

  161 assignment: VARIABLE assgn_exp
  162           | field_access assgn_exp
  163           | ArrayAccess assgn_exp

  164 field_access: NotJustName field_access_rest

  165 field_access_rest: '.' simple_nofa_exp field_access_rest
  166                  | '.' simple_nofa_exp

  167 simple_nofa_exp: VARIABLE
  168                | function_call
  169                | '(' exp ')'

  170 new_exp: NEW VARIABLE
  171        | NEW VARIABLE '(' ')'
  172        | NEW VARIABLE '(' nonempty_exp_list ')'
  173        | NEW parameterized_type '(' ')'
  174        | NEW parameterized_type '(' nonempty_exp_list ')'
  175        | NEW VARIABLE '[' exp ']'

  176 lambda_exp: '(' args_list ARROW exp
  177           | '(' args_list ARROW block
  178           | '(' ')' ARROW exp
  179           | '(' ')' ARROW block

  180 dialogueact_exp: '#' da_token '(' da_token ')'
  181                | '#' da_token '(' da_token da_args ')'

  182 da_token: '^' exp
  183         | VARIABLE
  184         | STRING
  185         | WILDCARD

  186 da_args: ',' da_token '=' da_token da_args
  187        | %empty


Terminals, with rules where they appear

$end (0) 0
'!' (33) 136
'#' (35) 180 181
'%' (37) 132
'&' (38) 117
'(' (40) 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 71 72 73 74 75
    76 77 78 92 93 134 149 169 171 172 173 174 176 177 178 179 180
    181
')' (41) 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 71 73 75 77 82
    83 92 93 134 149 169 171 172 173 174 178 179 180 181
'*' (42) 130
'+' (43) 127 140
',' (44) 52 70 84 85 96 97 103 186
'-' (45) 128 141
'.' (46) 12 79 165 166
'/' (47) 131
':' (58) 31 48 49 59 60 61 62 160
';' (59) 10 14 32 33 34 35 36 37 38 43 44 45 46 47 63 64 65 81 86 87
    88 89 90 91
'<' (60) 101 122
'=' (61) 66 67 68 186
'>' (62) 101 123
'?' (63) 160
'[' (91) 79 98 158 159 175
']' (93) 79 98 158 159 175
'^' (94) 115 182
'{' (123) 27 28 53 67 68
'|' (124) 113
'}' (125) 27 28 53 67 68
'~' (126) 137
error (256)
BREAK (258) 34 35
CANCEL (259) 36
CANCEL_ALL (260) 37
CASE (261) 59 60 61
CONTINUE (262) 38
DEFAULT (263) 62
DO (264) 42
ELSE (265) 40
FINAL (266) 63 65
FOR (267) 43 44 45 46 47 48 49
IF (268) 39 40
IMPORT (269) 10
NEW (270) 170 171 172 173 174 175
NULL (271) 144
PRIVATE (272) 9
PROPOSE (273) 50
PROTECTED (274) 8
PUBLIC (275) 7
RETURN (276) 32 33
SWITCH (277) 53
TIMEOUT (278) 52
TIMEOUT_BEHAVIOUR (279) 51
WHILE (280) 41 42
ARROW (281) 176 177 178 179
ANDAND (282) 110
OROR (283) 108
EQEQ (284) 119
NOTEQ (285) 120
GTEQ (286) 124
LTEQ (287) 125
MINUSEQ (288) 87 89 91
PLUSEQ (289) 86 88 90
MINUSMINUS (290) 139
PLUSPLUS (291) 138
STRING (292) 59 155 184
WILDCARD (293) 185
INT (294) 60 156
VARIABLE (295) 10 12 31 35 48 49 61 63 64 65 71 72 73 74 75 76 77 78
    82 83 84 85 86 87 92 93 98 99 101 147 158 161 167 170 171 172 175
    183
OTHER_LITERAL (296) 157


Nonterminals, with rules where they appear

$accept (67)
    on left: 0
grammar_file (68)
    on left: 1 2 3 4 5 6, on right: 0 1 2 3 4 5
visibility_spec (69)
    on left: 7 8 9, on right: 1 5
imports (70)
    on left: 10, on right: 4
path (71)
    on left: 11 12, on right: 10 12
statement (72)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24, on right: 3 25 39
    40 41 42 43 44 45 46 47 48 49
blk_statement (73)
    on left: 25 26, on right: 29 30
block (74)
    on left: 27 28, on right: 13 50 51 52 77 78 80 177 179
statements (75)
    on left: 29 30, on right: 27 30 55
grammar_rule (76)
    on left: 31, on right: 15
return_statement (77)
    on left: 32 33 34 35 36 37 38, on right: 17
if_statement (78)
    on left: 39 40, on right: 21 31
while_statement (79)
    on left: 41 42, on right: 22
for_statement (80)
    on left: 43 44 45 46 47 48 49, on right: 23
propose_statement (81)
    on left: 50, on right: 18
timeout_behaviour_statement (82)
    on left: 51, on right: 20
timeout_statement (83)
    on left: 52, on right: 19
switch_statement (84)
    on left: 53, on right: 24
switch_block (85)
    on left: 54, on right: 53
switch_cont (86)
    on left: 55 56, on right: 54 55
switch_labels (87)
    on left: 57 58, on right: 54 55 57
switch_label (88)
    on left: 59 60 61 62, on right: 57 58
var_def (89)
    on left: 63 64 65, on right: 5 26 43 44 45 46
assgn_exp (90)
    on left: 66 67 68, on right: 63 64 65 161 162 163
nonempty_exp_list (91)
    on left: 69 70, on right: 68 70 172 174
method_declaration (92)
    on left: 71 72 73 74 75 76 77 78, on right: 1 2
class_spec (93)
    on left: 79, on right: 71 72 73 74
opt_block (94)
    on left: 80 81, on right: 71 72 73 74 75 76
args_list (95)
    on left: 82 83 84 85, on right: 72 74 76 78 84 85 176 177
set_operation (96)
    on left: 86 87 88 89 90 91, on right: 16
function_call (97)
    on left: 92 93, on right: 154 168
nonempty_args_list (98)
    on left: 94 95 96 97, on right: 93 96 97
type_spec (99)
    on left: 98 99 100, on right: 49 64 65 71 72 75 76 79 83 85 102
    103 134
parameterized_type (100)
    on left: 101, on right: 100 173 174
type_spec_list (101)
    on left: 102 103, on right: 101 103
exp (102)
    on left: 104 105 106 107, on right: 14 33 39 40 41 42 43 44 45
    47 48 49 50 51 52 53 66 69 70 86 87 88 89 90 91 94 96 149 158 159
    160 169 175 176 178 182
ConditionalOrExpression (103)
    on left: 108 109, on right: 106 108
ConditionalAndExpression (104)
    on left: 110 111, on right: 108 109 110
InclusiveOrExpression (105)
    on left: 112 113, on right: 110 111 113
ExclusiveOrExpression (106)
    on left: 114 115, on right: 112 113 115
AndExpression (107)
    on left: 116 117, on right: 114 115 117
EqualityExpression (108)
    on left: 118 119 120, on right: 116 117 119 120
RelationalExpression (109)
    on left: 121 122 123 124 125, on right: 118 119 120 122 123 124
    125
AdditiveExpression (110)
    on left: 126 127 128, on right: 121 122 123 124 125 127 128
MultiplicativeExpression (111)
    on left: 129 130 131 132, on right: 126 127 128 130 131 132
CastExpression (112)
    on left: 133 134, on right: 129 130 131 132 134 140 141
LogicalUnaryExpression (113)
    on left: 135 136 137, on right: 142
UnaryExpression (114)
    on left: 138 139 140 141 142, on right: 133 136 137 138 139
PostfixExpression (115)
    on left: 143, on right: 135
PrimaryExpression (116)
    on left: 144 145 146, on right: 143
NotJustName (117)
    on left: 147 148, on right: 145 164
ComplexPrimary (118)
    on left: 149 150, on right: 146 159
ComplexPrimaryNoParenthesis (119)
    on left: 151 152 153 154, on right: 150
Literal (120)
    on left: 155 156 157, on right: 151
ArrayAccess (121)
    on left: 158 159, on right: 88 89 152 163
if_exp (122)
    on left: 160, on right: 104
assignment (123)
    on left: 161 162 163, on right: 105
field_access (124)
    on left: 164, on right: 90 91 153 162
field_access_rest (125)
    on left: 165 166, on right: 164 165
simple_nofa_exp (126)
    on left: 167 168 169, on right: 165 166
new_exp (127)
    on left: 170 171 172 173 174 175, on right: 148
lambda_exp (128)
    on left: 176 177 178 179, on right: 95 97
dialogueact_exp (129)
    on left: 180 181, on right: 107
da_token (130)
    on left: 182 183 184 185, on right: 180 181 186
da_args (131)
    on left: 186 187, on right: 181 186


State 0

    0 $accept: . grammar_file $end
    1 grammar_file: . visibility_spec method_declaration grammar_file
    2             | . method_declaration grammar_file
    3             | . statement grammar_file
    4             | . imports grammar_file
    5             | . visibility_spec var_def grammar_file
    6             | . %empty  [$end]
    7 visibility_spec: . PUBLIC
    8                | . PROTECTED
    9                | . PRIVATE
   10 imports: . IMPORT VARIABLE path ';'
   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   71 method_declaration: . class_spec type_spec VARIABLE '(' ')' opt_block
   72                   | . class_spec type_spec VARIABLE '(' args_list opt_block
   73                   | . class_spec VARIABLE '(' ')' opt_block
   74                   | . class_spec VARIABLE '(' args_list opt_block
   75                   | . type_spec VARIABLE '(' ')' opt_block
   76                   | . type_spec VARIABLE '(' args_list opt_block
   77                   | . VARIABLE '(' ')' block
   78                   | . VARIABLE '(' args_list block
   79 class_spec: . '[' type_spec '.' ']'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    IMPORT             shift, and go to state 8
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PRIVATE            shift, and go to state 11
    PROPOSE            shift, and go to state 12
    PROTECTED          shift, and go to state 13
    PUBLIC             shift, and go to state 14
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 24
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '['                shift, and go to state 28
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    $default  reduce using rule 6 (grammar_file)

    grammar_file                 go to state 34
    visibility_spec              go to state 35
    imports                      go to state 36
    statement                    go to state 37
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    method_declaration           go to state 48
    class_spec                   go to state 49
    set_operation                go to state 50
    function_call                go to state 51
    type_spec                    go to state 52
    parameterized_type           go to state 53
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 1

   34 return_statement: BREAK . ';'
   35                 | BREAK . VARIABLE ';'

    VARIABLE  shift, and go to state 79
    ';'       shift, and go to state 80


State 2

   36 return_statement: CANCEL . ';'

    ';'  shift, and go to state 81


State 3

   37 return_statement: CANCEL_ALL . ';'

    ';'  shift, and go to state 82


State 4

   38 return_statement: CONTINUE . ';'

    ';'  shift, and go to state 83


State 5

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   42                | DO . statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 85
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 6

   43 for_statement: FOR . '(' var_def exp ';' exp ')' statement
   44              | FOR . '(' var_def ';' exp ')' statement
   45              | FOR . '(' var_def exp ';' ')' statement
   46              | FOR . '(' var_def ';' ')' statement
   47              | FOR . '(' ';' exp ';' exp ')' statement
   48              | FOR . '(' VARIABLE ':' exp ')' statement
   49              | FOR . '(' type_spec VARIABLE ':' exp ')' statement

    '('  shift, and go to state 86


State 7

   39 if_statement: IF . '(' exp ')' statement
   40             | IF . '(' exp ')' statement ELSE statement

    '('  shift, and go to state 87


State 8

   10 imports: IMPORT . VARIABLE path ';'

    VARIABLE  shift, and go to state 88


State 9

  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  170 new_exp: NEW . VARIABLE
  171        | NEW . VARIABLE '(' ')'
  172        | NEW . VARIABLE '(' nonempty_exp_list ')'
  173        | NEW . parameterized_type '(' ')'
  174        | NEW . parameterized_type '(' nonempty_exp_list ')'
  175        | NEW . VARIABLE '[' exp ']'

    VARIABLE  shift, and go to state 89

    parameterized_type  go to state 90


State 10

  144 PrimaryExpression: NULL .

    $default  reduce using rule 144 (PrimaryExpression)


State 11

    9 visibility_spec: PRIVATE .

    $default  reduce using rule 9 (visibility_spec)


State 12

   50 propose_statement: PROPOSE . '(' exp ')' block

    '('  shift, and go to state 91


State 13

    8 visibility_spec: PROTECTED .

    $default  reduce using rule 8 (visibility_spec)


State 14

    7 visibility_spec: PUBLIC .

    $default  reduce using rule 7 (visibility_spec)


State 15

   32 return_statement: RETURN . ';'
   33                 | RETURN . exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    ';'            shift, and go to state 93
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 94
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 16

   53 switch_statement: SWITCH . '(' exp ')' '{' switch_block '}'

    '('  shift, and go to state 97


State 17

   52 timeout_statement: TIMEOUT . '(' exp ',' exp ')' block

    '('  shift, and go to state 98


State 18

   51 timeout_behaviour_statement: TIMEOUT_BEHAVIOUR . '(' exp ')' block

    '('  shift, and go to state 99


State 19

   41 while_statement: WHILE . '(' exp ')' statement

    '('  shift, and go to state 100


State 20

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  139                | MINUSMINUS . UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 102
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 103
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 21

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  138                | PLUSPLUS . UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 102
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 106
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 22

  155 Literal: STRING .

    $default  reduce using rule 155 (Literal)


State 23

  156 Literal: INT .

    $default  reduce using rule 156 (Literal)


State 24

   31 grammar_rule: VARIABLE . ':' if_statement
   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
   77 method_declaration: VARIABLE . '(' ')' block
   78                   | VARIABLE . '(' args_list block
   86 set_operation: VARIABLE . PLUSEQ exp ';'
   87              | VARIABLE . MINUSEQ exp ';'
   92 function_call: VARIABLE . '(' ')'
   93              | VARIABLE . '(' nonempty_args_list ')'
   98 type_spec: VARIABLE . '[' ']'
   99          | VARIABLE .  [VARIABLE]
  101 parameterized_type: VARIABLE . '<' type_spec_list '>'
  147 NotJustName: VARIABLE .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '.', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  158 ArrayAccess: VARIABLE . '[' exp ']'
  161 assignment: VARIABLE . assgn_exp

    MINUSEQ  shift, and go to state 107
    PLUSEQ   shift, and go to state 108
    ':'      shift, and go to state 109
    '('      shift, and go to state 110
    '='      shift, and go to state 111
    '['      shift, and go to state 112
    '<'      shift, and go to state 113

    VARIABLE  reduce using rule 99 (type_spec)
    '<'       [reduce using rule 147 (NotJustName)]
    $default  reduce using rule 147 (NotJustName)

    assgn_exp  go to state 114


State 25

  157 Literal: OTHER_LITERAL .

    $default  reduce using rule 157 (Literal)


State 26

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   25 blk_statement: . statement
   26              | . var_def
   27 block: . '{' statements '}'
   27      | '{' . statements '}'
   28      | . '{' '}'
   28      | '{' . '}'
   29 statements: . blk_statement
   30           | . blk_statement statements
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   63 var_def: . FINAL VARIABLE assgn_exp ';'
   64        | . type_spec VARIABLE assgn_exp ';'
   65        | . FINAL type_spec VARIABLE assgn_exp ';'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FINAL              shift, and go to state 115
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 116
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '}'                shift, and go to state 117
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 118
    blk_statement                go to state 119
    block                        go to state 38
    statements                   go to state 120
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    var_def                      go to state 121
    set_operation                go to state 50
    function_call                go to state 51
    type_spec                    go to state 122
    parameterized_type           go to state 53
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 27

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  134               | '(' . type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  149               | '(' . exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 123
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    type_spec                    go to state 124
    parameterized_type           go to state 53
    exp                          go to state 125
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 28

   79 class_spec: '[' . type_spec '.' ']'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    VARIABLE  shift, and go to state 126

    type_spec           go to state 127
    parameterized_type  go to state 53


State 29

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  140                | '+' . CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    CastExpression               go to state 128
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 30

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  141                | '-' . CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    CastExpression               go to state 129
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 31

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  136                       | '!' . UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 102
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 130
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 32

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  137                       | '~' . UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 102
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 131
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 33

  180 dialogueact_exp: '#' . da_token '(' da_token ')'
  181                | '#' . da_token '(' da_token da_args ')'
  182 da_token: . '^' exp
  183         | . VARIABLE
  184         | . STRING
  185         | . WILDCARD

    STRING    shift, and go to state 132
    WILDCARD  shift, and go to state 133
    VARIABLE  shift, and go to state 134
    '^'       shift, and go to state 135

    da_token  go to state 136


State 34

    0 $accept: grammar_file . $end

    $end  shift, and go to state 137


State 35

    1 grammar_file: visibility_spec . method_declaration grammar_file
    5             | visibility_spec . var_def grammar_file
   63 var_def: . FINAL VARIABLE assgn_exp ';'
   64        | . type_spec VARIABLE assgn_exp ';'
   65        | . FINAL type_spec VARIABLE assgn_exp ';'
   71 method_declaration: . class_spec type_spec VARIABLE '(' ')' opt_block
   72                   | . class_spec type_spec VARIABLE '(' args_list opt_block
   73                   | . class_spec VARIABLE '(' ')' opt_block
   74                   | . class_spec VARIABLE '(' args_list opt_block
   75                   | . type_spec VARIABLE '(' ')' opt_block
   76                   | . type_spec VARIABLE '(' args_list opt_block
   77                   | . VARIABLE '(' ')' block
   78                   | . VARIABLE '(' args_list block
   79 class_spec: . '[' type_spec '.' ']'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    FINAL     shift, and go to state 115
    VARIABLE  shift, and go to state 138
    '['       shift, and go to state 28

    var_def             go to state 139
    method_declaration  go to state 140
    class_spec          go to state 49
    type_spec           go to state 141
    parameterized_type  go to state 53


State 36

    1 grammar_file: . visibility_spec method_declaration grammar_file
    2             | . method_declaration grammar_file
    3             | . statement grammar_file
    4             | . imports grammar_file
    4             | imports . grammar_file
    5             | . visibility_spec var_def grammar_file
    6             | . %empty  [$end]
    7 visibility_spec: . PUBLIC
    8                | . PROTECTED
    9                | . PRIVATE
   10 imports: . IMPORT VARIABLE path ';'
   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   71 method_declaration: . class_spec type_spec VARIABLE '(' ')' opt_block
   72                   | . class_spec type_spec VARIABLE '(' args_list opt_block
   73                   | . class_spec VARIABLE '(' ')' opt_block
   74                   | . class_spec VARIABLE '(' args_list opt_block
   75                   | . type_spec VARIABLE '(' ')' opt_block
   76                   | . type_spec VARIABLE '(' args_list opt_block
   77                   | . VARIABLE '(' ')' block
   78                   | . VARIABLE '(' args_list block
   79 class_spec: . '[' type_spec '.' ']'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    IMPORT             shift, and go to state 8
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PRIVATE            shift, and go to state 11
    PROPOSE            shift, and go to state 12
    PROTECTED          shift, and go to state 13
    PUBLIC             shift, and go to state 14
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 24
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '['                shift, and go to state 28
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    $default  reduce using rule 6 (grammar_file)

    grammar_file                 go to state 142
    visibility_spec              go to state 35
    imports                      go to state 36
    statement                    go to state 37
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    method_declaration           go to state 48
    class_spec                   go to state 49
    set_operation                go to state 50
    function_call                go to state 51
    type_spec                    go to state 52
    parameterized_type           go to state 53
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 37

    1 grammar_file: . visibility_spec method_declaration grammar_file
    2             | . method_declaration grammar_file
    3             | . statement grammar_file
    3             | statement . grammar_file
    4             | . imports grammar_file
    5             | . visibility_spec var_def grammar_file
    6             | . %empty  [$end]
    7 visibility_spec: . PUBLIC
    8                | . PROTECTED
    9                | . PRIVATE
   10 imports: . IMPORT VARIABLE path ';'
   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   71 method_declaration: . class_spec type_spec VARIABLE '(' ')' opt_block
   72                   | . class_spec type_spec VARIABLE '(' args_list opt_block
   73                   | . class_spec VARIABLE '(' ')' opt_block
   74                   | . class_spec VARIABLE '(' args_list opt_block
   75                   | . type_spec VARIABLE '(' ')' opt_block
   76                   | . type_spec VARIABLE '(' args_list opt_block
   77                   | . VARIABLE '(' ')' block
   78                   | . VARIABLE '(' args_list block
   79 class_spec: . '[' type_spec '.' ']'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    IMPORT             shift, and go to state 8
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PRIVATE            shift, and go to state 11
    PROPOSE            shift, and go to state 12
    PROTECTED          shift, and go to state 13
    PUBLIC             shift, and go to state 14
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 24
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '['                shift, and go to state 28
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    $default  reduce using rule 6 (grammar_file)

    grammar_file                 go to state 143
    visibility_spec              go to state 35
    imports                      go to state 36
    statement                    go to state 37
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    method_declaration           go to state 48
    class_spec                   go to state 49
    set_operation                go to state 50
    function_call                go to state 51
    type_spec                    go to state 52
    parameterized_type           go to state 53
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 38

   13 statement: block .

    $default  reduce using rule 13 (statement)


State 39

   15 statement: grammar_rule .

    $default  reduce using rule 15 (statement)


State 40

   17 statement: return_statement .

    $default  reduce using rule 17 (statement)


State 41

   21 statement: if_statement .

    $default  reduce using rule 21 (statement)


State 42

   22 statement: while_statement .

    $default  reduce using rule 22 (statement)


State 43

   23 statement: for_statement .

    $default  reduce using rule 23 (statement)


State 44

   18 statement: propose_statement .

    $default  reduce using rule 18 (statement)


State 45

   20 statement: timeout_behaviour_statement .

    $default  reduce using rule 20 (statement)


State 46

   19 statement: timeout_statement .

    $default  reduce using rule 19 (statement)


State 47

   24 statement: switch_statement .

    $default  reduce using rule 24 (statement)


State 48

    1 grammar_file: . visibility_spec method_declaration grammar_file
    2             | . method_declaration grammar_file
    2             | method_declaration . grammar_file
    3             | . statement grammar_file
    4             | . imports grammar_file
    5             | . visibility_spec var_def grammar_file
    6             | . %empty  [$end]
    7 visibility_spec: . PUBLIC
    8                | . PROTECTED
    9                | . PRIVATE
   10 imports: . IMPORT VARIABLE path ';'
   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   71 method_declaration: . class_spec type_spec VARIABLE '(' ')' opt_block
   72                   | . class_spec type_spec VARIABLE '(' args_list opt_block
   73                   | . class_spec VARIABLE '(' ')' opt_block
   74                   | . class_spec VARIABLE '(' args_list opt_block
   75                   | . type_spec VARIABLE '(' ')' opt_block
   76                   | . type_spec VARIABLE '(' args_list opt_block
   77                   | . VARIABLE '(' ')' block
   78                   | . VARIABLE '(' args_list block
   79 class_spec: . '[' type_spec '.' ']'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    IMPORT             shift, and go to state 8
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PRIVATE            shift, and go to state 11
    PROPOSE            shift, and go to state 12
    PROTECTED          shift, and go to state 13
    PUBLIC             shift, and go to state 14
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 24
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '['                shift, and go to state 28
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    $default  reduce using rule 6 (grammar_file)

    grammar_file                 go to state 144
    visibility_spec              go to state 35
    imports                      go to state 36
    statement                    go to state 37
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    method_declaration           go to state 48
    class_spec                   go to state 49
    set_operation                go to state 50
    function_call                go to state 51
    type_spec                    go to state 52
    parameterized_type           go to state 53
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 49

   71 method_declaration: class_spec . type_spec VARIABLE '(' ')' opt_block
   72                   | class_spec . type_spec VARIABLE '(' args_list opt_block
   73                   | class_spec . VARIABLE '(' ')' opt_block
   74                   | class_spec . VARIABLE '(' args_list opt_block
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    VARIABLE  shift, and go to state 145

    type_spec           go to state 146
    parameterized_type  go to state 53


State 50

   16 statement: set_operation .

    $default  reduce using rule 16 (statement)


State 51

  154 ComplexPrimaryNoParenthesis: function_call .

    $default  reduce using rule 154 (ComplexPrimaryNoParenthesis)


State 52

   75 method_declaration: type_spec . VARIABLE '(' ')' opt_block
   76                   | type_spec . VARIABLE '(' args_list opt_block

    VARIABLE  shift, and go to state 147


State 53

  100 type_spec: parameterized_type .

    $default  reduce using rule 100 (type_spec)


State 54

   14 statement: exp . ';'
  160 if_exp: exp . '?' exp ':' exp

    ';'  shift, and go to state 148
    '?'  shift, and go to state 149


State 55

  106 exp: ConditionalOrExpression .  [';', '}', ':', '(', ')', ',', '=', ']', '?']
  108 ConditionalOrExpression: ConditionalOrExpression . OROR ConditionalAndExpression

    OROR  shift, and go to state 150

    $default  reduce using rule 106 (exp)


State 56

  109 ConditionalOrExpression: ConditionalAndExpression .  [OROR, ';', '}', ':', '(', ')', ',', '=', ']', '?']
  110 ConditionalAndExpression: ConditionalAndExpression . ANDAND InclusiveOrExpression

    ANDAND  shift, and go to state 151

    $default  reduce using rule 109 (ConditionalOrExpression)


State 57

  111 ConditionalAndExpression: InclusiveOrExpression .  [ANDAND, OROR, ';', '}', ':', '(', ')', ',', '=', ']', '?']
  113 InclusiveOrExpression: InclusiveOrExpression . '|' ExclusiveOrExpression

    '|'  shift, and go to state 152

    $default  reduce using rule 111 (ConditionalAndExpression)


State 58

  112 InclusiveOrExpression: ExclusiveOrExpression .  [ANDAND, OROR, ';', '}', ':', '(', ')', ',', '=', ']', '|', '?']
  115 ExclusiveOrExpression: ExclusiveOrExpression . '^' AndExpression

    '^'  shift, and go to state 153

    $default  reduce using rule 112 (InclusiveOrExpression)


State 59

  114 ExclusiveOrExpression: AndExpression .  [ANDAND, OROR, ';', '}', ':', '(', ')', ',', '=', ']', '|', '^', '?']
  117 AndExpression: AndExpression . '&' EqualityExpression

    '&'  shift, and go to state 154

    $default  reduce using rule 114 (ExclusiveOrExpression)


State 60

  116 AndExpression: EqualityExpression .  [ANDAND, OROR, ';', '}', ':', '(', ')', ',', '=', ']', '|', '^', '&', '?']
  119 EqualityExpression: EqualityExpression . EQEQ RelationalExpression
  120                   | EqualityExpression . NOTEQ RelationalExpression

    EQEQ   shift, and go to state 155
    NOTEQ  shift, and go to state 156

    $default  reduce using rule 116 (AndExpression)


State 61

  118 EqualityExpression: RelationalExpression .  [ANDAND, OROR, EQEQ, NOTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '|', '^', '&', '?']
  122 RelationalExpression: RelationalExpression . '<' AdditiveExpression
  123                     | RelationalExpression . '>' AdditiveExpression
  124                     | RelationalExpression . GTEQ AdditiveExpression
  125                     | RelationalExpression . LTEQ AdditiveExpression

    GTEQ  shift, and go to state 157
    LTEQ  shift, and go to state 158
    '<'   shift, and go to state 159
    '>'   shift, and go to state 160

    $default  reduce using rule 118 (EqualityExpression)


State 62

  121 RelationalExpression: AdditiveExpression .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '?']
  127 AdditiveExpression: AdditiveExpression . '+' MultiplicativeExpression
  128                   | AdditiveExpression . '-' MultiplicativeExpression

    '+'  shift, and go to state 161
    '-'  shift, and go to state 162

    $default  reduce using rule 121 (RelationalExpression)


State 63

  126 AdditiveExpression: MultiplicativeExpression .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '+', '-', '?']
  130 MultiplicativeExpression: MultiplicativeExpression . '*' CastExpression
  131                         | MultiplicativeExpression . '/' CastExpression
  132                         | MultiplicativeExpression . '%' CastExpression

    '*'  shift, and go to state 163
    '/'  shift, and go to state 164
    '%'  shift, and go to state 165

    $default  reduce using rule 126 (AdditiveExpression)


State 64

  129 MultiplicativeExpression: CastExpression .

    $default  reduce using rule 129 (MultiplicativeExpression)


State 65

  142 UnaryExpression: LogicalUnaryExpression .

    $default  reduce using rule 142 (UnaryExpression)


State 66

  133 CastExpression: UnaryExpression .

    $default  reduce using rule 133 (CastExpression)


State 67

  135 LogicalUnaryExpression: PostfixExpression .

    $default  reduce using rule 135 (LogicalUnaryExpression)


State 68

  143 PostfixExpression: PrimaryExpression .

    $default  reduce using rule 143 (PostfixExpression)


State 69

  145 PrimaryExpression: NotJustName .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  164 field_access: NotJustName . field_access_rest
  165 field_access_rest: . '.' simple_nofa_exp field_access_rest
  166                  | . '.' simple_nofa_exp

    '.'  shift, and go to state 166

    $default  reduce using rule 145 (PrimaryExpression)

    field_access_rest  go to state 167


State 70

  146 PrimaryExpression: ComplexPrimary .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  159 ArrayAccess: ComplexPrimary . '[' exp ']'

    '['  shift, and go to state 168

    $default  reduce using rule 146 (PrimaryExpression)


State 71

  150 ComplexPrimary: ComplexPrimaryNoParenthesis .

    $default  reduce using rule 150 (ComplexPrimary)


State 72

  151 ComplexPrimaryNoParenthesis: Literal .

    $default  reduce using rule 151 (ComplexPrimaryNoParenthesis)


State 73

   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
   88 set_operation: ArrayAccess . PLUSEQ exp ';'
   89              | ArrayAccess . MINUSEQ exp ';'
  152 ComplexPrimaryNoParenthesis: ArrayAccess .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '[', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  163 assignment: ArrayAccess . assgn_exp

    MINUSEQ  shift, and go to state 169
    PLUSEQ   shift, and go to state 170
    '='      shift, and go to state 111

    $default  reduce using rule 152 (ComplexPrimaryNoParenthesis)

    assgn_exp  go to state 171


State 74

  104 exp: if_exp .

    $default  reduce using rule 104 (exp)


State 75

  105 exp: assignment .

    $default  reduce using rule 105 (exp)


State 76

   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
   90 set_operation: field_access . PLUSEQ exp ';'
   91              | field_access . MINUSEQ exp ';'
  153 ComplexPrimaryNoParenthesis: field_access .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '[', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  162 assignment: field_access . assgn_exp

    MINUSEQ  shift, and go to state 172
    PLUSEQ   shift, and go to state 173
    '='      shift, and go to state 111

    $default  reduce using rule 153 (ComplexPrimaryNoParenthesis)

    assgn_exp  go to state 174


State 77

  148 NotJustName: new_exp .

    $default  reduce using rule 148 (NotJustName)


State 78

  107 exp: dialogueact_exp .

    $default  reduce using rule 107 (exp)


State 79

   35 return_statement: BREAK VARIABLE . ';'

    ';'  shift, and go to state 175


State 80

   34 return_statement: BREAK ';' .

    $default  reduce using rule 34 (return_statement)


State 81

   36 return_statement: CANCEL ';' .

    $default  reduce using rule 36 (return_statement)


State 82

   37 return_statement: CANCEL_ALL ';' .

    $default  reduce using rule 37 (return_statement)


State 83

   38 return_statement: CONTINUE ';' .

    $default  reduce using rule 38 (return_statement)


State 84

   31 grammar_rule: VARIABLE . ':' if_statement
   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
   86 set_operation: VARIABLE . PLUSEQ exp ';'
   87              | VARIABLE . MINUSEQ exp ';'
   92 function_call: VARIABLE . '(' ')'
   93              | VARIABLE . '(' nonempty_args_list ')'
  147 NotJustName: VARIABLE .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '.', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  158 ArrayAccess: VARIABLE . '[' exp ']'
  161 assignment: VARIABLE . assgn_exp

    MINUSEQ  shift, and go to state 107
    PLUSEQ   shift, and go to state 108
    ':'      shift, and go to state 109
    '('      shift, and go to state 176
    '='      shift, and go to state 111
    '['      shift, and go to state 177

    $default  reduce using rule 147 (NotJustName)

    assgn_exp  go to state 114


State 85

   42 while_statement: DO statement . WHILE '(' exp ')'

    WHILE  shift, and go to state 178


State 86

   43 for_statement: FOR '(' . var_def exp ';' exp ')' statement
   44              | FOR '(' . var_def ';' exp ')' statement
   45              | FOR '(' . var_def exp ';' ')' statement
   46              | FOR '(' . var_def ';' ')' statement
   47              | FOR '(' . ';' exp ';' exp ')' statement
   48              | FOR '(' . VARIABLE ':' exp ')' statement
   49              | FOR '(' . type_spec VARIABLE ':' exp ')' statement
   63 var_def: . FINAL VARIABLE assgn_exp ';'
   64        | . type_spec VARIABLE assgn_exp ';'
   65        | . FINAL type_spec VARIABLE assgn_exp ';'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    FINAL     shift, and go to state 115
    VARIABLE  shift, and go to state 179
    ';'       shift, and go to state 180

    var_def             go to state 181
    type_spec           go to state 182
    parameterized_type  go to state 53


State 87

   39 if_statement: IF '(' . exp ')' statement
   40             | IF '(' . exp ')' statement ELSE statement
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 183
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 88

   10 imports: IMPORT VARIABLE . path ';'
   11 path: . %empty  [';']
   12     | . '.' VARIABLE path

    '.'  shift, and go to state 184

    $default  reduce using rule 11 (path)

    path  go to state 185


State 89

  101 parameterized_type: VARIABLE . '<' type_spec_list '>'
  170 new_exp: NEW VARIABLE .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '.', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  171        | NEW VARIABLE . '(' ')'
  172        | NEW VARIABLE . '(' nonempty_exp_list ')'
  175        | NEW VARIABLE . '[' exp ']'

    '('  shift, and go to state 186
    '['  shift, and go to state 187
    '<'  shift, and go to state 113

    '('       [reduce using rule 170 (new_exp)]
    '<'       [reduce using rule 170 (new_exp)]
    $default  reduce using rule 170 (new_exp)


State 90

  173 new_exp: NEW parameterized_type . '(' ')'
  174        | NEW parameterized_type . '(' nonempty_exp_list ')'

    '('  shift, and go to state 188


State 91

   50 propose_statement: PROPOSE '(' . exp ')' block
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 189
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 92

   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
   92 function_call: VARIABLE . '(' ')'
   93              | VARIABLE . '(' nonempty_args_list ')'
  147 NotJustName: VARIABLE .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '.', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  158 ArrayAccess: VARIABLE . '[' exp ']'
  161 assignment: VARIABLE . assgn_exp

    '('  shift, and go to state 176
    '='  shift, and go to state 111
    '['  shift, and go to state 177

    '('       [reduce using rule 147 (NotJustName)]
    '='       [reduce using rule 147 (NotJustName)]
    $default  reduce using rule 147 (NotJustName)

    assgn_exp  go to state 114


State 93

   32 return_statement: RETURN ';' .

    $default  reduce using rule 32 (return_statement)


State 94

   33 return_statement: RETURN exp . ';'
  160 if_exp: exp . '?' exp ':' exp

    ';'  shift, and go to state 190
    '?'  shift, and go to state 149


State 95

   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
  152 ComplexPrimaryNoParenthesis: ArrayAccess .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', '[', ']', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  163 assignment: ArrayAccess . assgn_exp

    '='  shift, and go to state 111

    '='       [reduce using rule 152 (ComplexPrimaryNoParenthesis)]
    $default  reduce using rule 152 (ComplexPrimaryNoParenthesis)

    assgn_exp  go to state 171


State 96

   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
  153 ComplexPrimaryNoParenthesis: field_access .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', '[', ']', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  162 assignment: field_access . assgn_exp

    '='  shift, and go to state 111

    '='       [reduce using rule 153 (ComplexPrimaryNoParenthesis)]
    $default  reduce using rule 153 (ComplexPrimaryNoParenthesis)

    assgn_exp  go to state 174


State 97

   53 switch_statement: SWITCH '(' . exp ')' '{' switch_block '}'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 191
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 98

   52 timeout_statement: TIMEOUT '(' . exp ',' exp ')' block
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 192
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 99

   51 timeout_behaviour_statement: TIMEOUT_BEHAVIOUR '(' . exp ')' block
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 193
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 100

   41 while_statement: WHILE '(' . exp ')' statement
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 194
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 101

   92 function_call: VARIABLE . '(' ')'
   93              | VARIABLE . '(' nonempty_args_list ')'
  147 NotJustName: VARIABLE .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '.', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  158 ArrayAccess: VARIABLE . '[' exp ']'

    '('  shift, and go to state 176
    '['  shift, and go to state 177

    '('       [reduce using rule 147 (NotJustName)]
    $default  reduce using rule 147 (NotJustName)


State 102

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  149               | '(' . exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 125
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 103

  139 UnaryExpression: MINUSMINUS UnaryExpression .

    $default  reduce using rule 139 (UnaryExpression)


State 104

  152 ComplexPrimaryNoParenthesis: ArrayAccess .

    $default  reduce using rule 152 (ComplexPrimaryNoParenthesis)


State 105

  153 ComplexPrimaryNoParenthesis: field_access .

    $default  reduce using rule 153 (ComplexPrimaryNoParenthesis)


State 106

  138 UnaryExpression: PLUSPLUS UnaryExpression .

    $default  reduce using rule 138 (UnaryExpression)


State 107

   87 set_operation: VARIABLE MINUSEQ . exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 195
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 108

   86 set_operation: VARIABLE PLUSEQ . exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 196
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 109

   31 grammar_rule: VARIABLE ':' . if_statement
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement

    IF  shift, and go to state 7

    if_statement  go to state 197


State 110

   77 method_declaration: VARIABLE '(' . ')' block
   78                   | VARIABLE '(' . args_list block
   82 args_list: . VARIABLE ')'
   83          | . type_spec VARIABLE ')'
   84          | . VARIABLE ',' args_list
   85          | . type_spec VARIABLE ',' args_list
   92 function_call: . VARIABLE '(' ')'
   92              | VARIABLE '(' . ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   93              | VARIABLE '(' . nonempty_args_list ')'
   94 nonempty_args_list: . exp
   95                   | . lambda_exp
   96                   | . exp ',' nonempty_args_list
   97                   | . lambda_exp ',' nonempty_args_list
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  176 lambda_exp: . '(' args_list ARROW exp
  177           | . '(' args_list ARROW block
  178           | . '(' ')' ARROW exp
  179           | . '(' ')' ARROW block
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 198
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 199
    ')'            shift, and go to state 200
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    args_list                    go to state 201
    function_call                go to state 51
    nonempty_args_list           go to state 202
    type_spec                    go to state 203
    parameterized_type           go to state 53
    exp                          go to state 204
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    lambda_exp                   go to state 205
    dialogueact_exp              go to state 78


State 111

   66 assgn_exp: '=' . exp
   67          | '=' . '{' '}'
   68          | '=' . '{' nonempty_exp_list '}'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '{'            shift, and go to state 206
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 207
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 112

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: VARIABLE '[' . ']'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  158            | VARIABLE '[' . exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    ']'            shift, and go to state 208
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 209
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 113

   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  101                   | VARIABLE '<' . type_spec_list '>'
  102 type_spec_list: . type_spec
  103               | . type_spec ',' type_spec_list

    VARIABLE  shift, and go to state 126

    type_spec           go to state 210
    parameterized_type  go to state 53
    type_spec_list      go to state 211


State 114

  161 assignment: VARIABLE assgn_exp .

    $default  reduce using rule 161 (assignment)


State 115

   63 var_def: FINAL . VARIABLE assgn_exp ';'
   65        | FINAL . type_spec VARIABLE assgn_exp ';'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    VARIABLE  shift, and go to state 212

    type_spec           go to state 213
    parameterized_type  go to state 53


State 116

   31 grammar_rule: VARIABLE . ':' if_statement
   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
   86 set_operation: VARIABLE . PLUSEQ exp ';'
   87              | VARIABLE . MINUSEQ exp ';'
   92 function_call: VARIABLE . '(' ')'
   93              | VARIABLE . '(' nonempty_args_list ')'
   98 type_spec: VARIABLE . '[' ']'
   99          | VARIABLE .  [VARIABLE]
  101 parameterized_type: VARIABLE . '<' type_spec_list '>'
  147 NotJustName: VARIABLE .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '.', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  158 ArrayAccess: VARIABLE . '[' exp ']'
  161 assignment: VARIABLE . assgn_exp

    MINUSEQ  shift, and go to state 107
    PLUSEQ   shift, and go to state 108
    ':'      shift, and go to state 109
    '('      shift, and go to state 176
    '='      shift, and go to state 111
    '['      shift, and go to state 112
    '<'      shift, and go to state 113

    VARIABLE  reduce using rule 99 (type_spec)
    '<'       [reduce using rule 147 (NotJustName)]
    $default  reduce using rule 147 (NotJustName)

    assgn_exp  go to state 114


State 117

   28 block: '{' '}' .

    $default  reduce using rule 28 (block)


State 118

   25 blk_statement: statement .

    $default  reduce using rule 25 (blk_statement)


State 119

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   25 blk_statement: . statement
   26              | . var_def
   27 block: . '{' statements '}'
   28      | . '{' '}'
   29 statements: . blk_statement
   29           | blk_statement .  [CASE, DEFAULT, '}']
   30           | . blk_statement statements
   30           | blk_statement . statements
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   63 var_def: . FINAL VARIABLE assgn_exp ';'
   64        | . type_spec VARIABLE assgn_exp ';'
   65        | . FINAL type_spec VARIABLE assgn_exp ';'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FINAL              shift, and go to state 115
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 116
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    $default  reduce using rule 29 (statements)

    statement                    go to state 118
    blk_statement                go to state 119
    block                        go to state 38
    statements                   go to state 214
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    var_def                      go to state 121
    set_operation                go to state 50
    function_call                go to state 51
    type_spec                    go to state 122
    parameterized_type           go to state 53
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 120

   27 block: '{' statements . '}'

    '}'  shift, and go to state 215


State 121

   26 blk_statement: var_def .

    $default  reduce using rule 26 (blk_statement)


State 122

   64 var_def: type_spec . VARIABLE assgn_exp ';'

    VARIABLE  shift, and go to state 216


State 123

   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
   92 function_call: VARIABLE . '(' ')'
   93              | VARIABLE . '(' nonempty_args_list ')'
   98 type_spec: VARIABLE . '[' ']'
   99          | VARIABLE .  [')']
  101 parameterized_type: VARIABLE . '<' type_spec_list '>'
  147 NotJustName: VARIABLE .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, '.', ')', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  158 ArrayAccess: VARIABLE . '[' exp ']'
  161 assignment: VARIABLE . assgn_exp

    '('  shift, and go to state 176
    '='  shift, and go to state 111
    '['  shift, and go to state 112
    '<'  shift, and go to state 113

    ')'       reduce using rule 99 (type_spec)
    ')'       [reduce using rule 147 (NotJustName)]
    '<'       [reduce using rule 147 (NotJustName)]
    $default  reduce using rule 147 (NotJustName)

    assgn_exp  go to state 114


State 124

  134 CastExpression: '(' type_spec . ')' CastExpression

    ')'  shift, and go to state 217


State 125

  149 ComplexPrimary: '(' exp . ')'
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 218
    '?'  shift, and go to state 149


State 126

   98 type_spec: VARIABLE . '[' ']'
   99          | VARIABLE .  ['.', ',', '>']
  101 parameterized_type: VARIABLE . '<' type_spec_list '>'

    '['  shift, and go to state 219
    '<'  shift, and go to state 113

    $default  reduce using rule 99 (type_spec)


State 127

   79 class_spec: '[' type_spec . '.' ']'

    '.'  shift, and go to state 220


State 128

  140 UnaryExpression: '+' CastExpression .

    $default  reduce using rule 140 (UnaryExpression)


State 129

  141 UnaryExpression: '-' CastExpression .

    $default  reduce using rule 141 (UnaryExpression)


State 130

  136 LogicalUnaryExpression: '!' UnaryExpression .

    $default  reduce using rule 136 (LogicalUnaryExpression)


State 131

  137 LogicalUnaryExpression: '~' UnaryExpression .

    $default  reduce using rule 137 (LogicalUnaryExpression)


State 132

  184 da_token: STRING .

    $default  reduce using rule 184 (da_token)


State 133

  185 da_token: WILDCARD .

    $default  reduce using rule 185 (da_token)


State 134

  183 da_token: VARIABLE .

    $default  reduce using rule 183 (da_token)


State 135

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'
  182 da_token: '^' . exp

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 221
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 136

  180 dialogueact_exp: '#' da_token . '(' da_token ')'
  181                | '#' da_token . '(' da_token da_args ')'

    '('  shift, and go to state 222


State 137

    0 $accept: grammar_file $end .

    $default  accept


State 138

   77 method_declaration: VARIABLE . '(' ')' block
   78                   | VARIABLE . '(' args_list block
   98 type_spec: VARIABLE . '[' ']'
   99          | VARIABLE .  [VARIABLE]
  101 parameterized_type: VARIABLE . '<' type_spec_list '>'

    '('  shift, and go to state 223
    '['  shift, and go to state 219
    '<'  shift, and go to state 113

    $default  reduce using rule 99 (type_spec)


State 139

    1 grammar_file: . visibility_spec method_declaration grammar_file
    2             | . method_declaration grammar_file
    3             | . statement grammar_file
    4             | . imports grammar_file
    5             | . visibility_spec var_def grammar_file
    5             | visibility_spec var_def . grammar_file
    6             | . %empty  [$end]
    7 visibility_spec: . PUBLIC
    8                | . PROTECTED
    9                | . PRIVATE
   10 imports: . IMPORT VARIABLE path ';'
   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   71 method_declaration: . class_spec type_spec VARIABLE '(' ')' opt_block
   72                   | . class_spec type_spec VARIABLE '(' args_list opt_block
   73                   | . class_spec VARIABLE '(' ')' opt_block
   74                   | . class_spec VARIABLE '(' args_list opt_block
   75                   | . type_spec VARIABLE '(' ')' opt_block
   76                   | . type_spec VARIABLE '(' args_list opt_block
   77                   | . VARIABLE '(' ')' block
   78                   | . VARIABLE '(' args_list block
   79 class_spec: . '[' type_spec '.' ']'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    IMPORT             shift, and go to state 8
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PRIVATE            shift, and go to state 11
    PROPOSE            shift, and go to state 12
    PROTECTED          shift, and go to state 13
    PUBLIC             shift, and go to state 14
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 24
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '['                shift, and go to state 28
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    $default  reduce using rule 6 (grammar_file)

    grammar_file                 go to state 224
    visibility_spec              go to state 35
    imports                      go to state 36
    statement                    go to state 37
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    method_declaration           go to state 48
    class_spec                   go to state 49
    set_operation                go to state 50
    function_call                go to state 51
    type_spec                    go to state 52
    parameterized_type           go to state 53
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 140

    1 grammar_file: . visibility_spec method_declaration grammar_file
    1             | visibility_spec method_declaration . grammar_file
    2             | . method_declaration grammar_file
    3             | . statement grammar_file
    4             | . imports grammar_file
    5             | . visibility_spec var_def grammar_file
    6             | . %empty  [$end]
    7 visibility_spec: . PUBLIC
    8                | . PROTECTED
    9                | . PRIVATE
   10 imports: . IMPORT VARIABLE path ';'
   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   71 method_declaration: . class_spec type_spec VARIABLE '(' ')' opt_block
   72                   | . class_spec type_spec VARIABLE '(' args_list opt_block
   73                   | . class_spec VARIABLE '(' ')' opt_block
   74                   | . class_spec VARIABLE '(' args_list opt_block
   75                   | . type_spec VARIABLE '(' ')' opt_block
   76                   | . type_spec VARIABLE '(' args_list opt_block
   77                   | . VARIABLE '(' ')' block
   78                   | . VARIABLE '(' args_list block
   79 class_spec: . '[' type_spec '.' ']'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    IMPORT             shift, and go to state 8
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PRIVATE            shift, and go to state 11
    PROPOSE            shift, and go to state 12
    PROTECTED          shift, and go to state 13
    PUBLIC             shift, and go to state 14
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 24
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '['                shift, and go to state 28
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    $default  reduce using rule 6 (grammar_file)

    grammar_file                 go to state 225
    visibility_spec              go to state 35
    imports                      go to state 36
    statement                    go to state 37
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    method_declaration           go to state 48
    class_spec                   go to state 49
    set_operation                go to state 50
    function_call                go to state 51
    type_spec                    go to state 52
    parameterized_type           go to state 53
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 141

   64 var_def: type_spec . VARIABLE assgn_exp ';'
   75 method_declaration: type_spec . VARIABLE '(' ')' opt_block
   76                   | type_spec . VARIABLE '(' args_list opt_block

    VARIABLE  shift, and go to state 226


State 142

    4 grammar_file: imports grammar_file .

    $default  reduce using rule 4 (grammar_file)


State 143

    3 grammar_file: statement grammar_file .

    $default  reduce using rule 3 (grammar_file)


State 144

    2 grammar_file: method_declaration grammar_file .

    $default  reduce using rule 2 (grammar_file)


State 145

   73 method_declaration: class_spec VARIABLE . '(' ')' opt_block
   74                   | class_spec VARIABLE . '(' args_list opt_block
   98 type_spec: VARIABLE . '[' ']'
   99          | VARIABLE .  [VARIABLE]
  101 parameterized_type: VARIABLE . '<' type_spec_list '>'

    '('  shift, and go to state 227
    '['  shift, and go to state 219
    '<'  shift, and go to state 113

    $default  reduce using rule 99 (type_spec)


State 146

   71 method_declaration: class_spec type_spec . VARIABLE '(' ')' opt_block
   72                   | class_spec type_spec . VARIABLE '(' args_list opt_block

    VARIABLE  shift, and go to state 228


State 147

   75 method_declaration: type_spec VARIABLE . '(' ')' opt_block
   76                   | type_spec VARIABLE . '(' args_list opt_block

    '('  shift, and go to state 229


State 148

   14 statement: exp ';' .

    $default  reduce using rule 14 (statement)


State 149

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  160       | exp '?' . exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 230
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 150

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  108 ConditionalOrExpression: ConditionalOrExpression OROR . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    ConditionalAndExpression     go to state 231
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 151

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  110 ConditionalAndExpression: ConditionalAndExpression ANDAND . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    InclusiveOrExpression        go to state 232
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 152

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  113 InclusiveOrExpression: InclusiveOrExpression '|' . ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    ExclusiveOrExpression        go to state 233
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 153

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  115 ExclusiveOrExpression: ExclusiveOrExpression '^' . AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    AndExpression                go to state 234
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 154

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  117 AndExpression: AndExpression '&' . EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    EqualityExpression           go to state 235
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 155

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  119 EqualityExpression: EqualityExpression EQEQ . RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    RelationalExpression         go to state 236
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 156

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  120 EqualityExpression: EqualityExpression NOTEQ . RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    RelationalExpression         go to state 237
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 157

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  124 RelationalExpression: RelationalExpression GTEQ . AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    AdditiveExpression           go to state 238
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 158

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  125 RelationalExpression: RelationalExpression LTEQ . AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    AdditiveExpression           go to state 239
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 159

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  122 RelationalExpression: RelationalExpression '<' . AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    AdditiveExpression           go to state 240
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 160

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  123 RelationalExpression: RelationalExpression '>' . AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    AdditiveExpression           go to state 241
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 161

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  127 AdditiveExpression: AdditiveExpression '+' . MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    MultiplicativeExpression     go to state 242
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 162

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  128 AdditiveExpression: AdditiveExpression '-' . MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    MultiplicativeExpression     go to state 243
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 163

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  130 MultiplicativeExpression: MultiplicativeExpression '*' . CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    CastExpression               go to state 244
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 164

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  131 MultiplicativeExpression: MultiplicativeExpression '/' . CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    CastExpression               go to state 245
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 165

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  132 MultiplicativeExpression: MultiplicativeExpression '%' . CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    CastExpression               go to state 246
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 166

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  165 field_access_rest: '.' . simple_nofa_exp field_access_rest
  166                  | '.' . simple_nofa_exp
  167 simple_nofa_exp: . VARIABLE
  168                | . function_call
  169                | . '(' exp ')'

    VARIABLE  shift, and go to state 247
    '('       shift, and go to state 248

    function_call    go to state 249
    simple_nofa_exp  go to state 250


State 167

  164 field_access: NotJustName field_access_rest .

    $default  reduce using rule 164 (field_access)


State 168

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  159            | ComplexPrimary '[' . exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 251
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 169

   89 set_operation: ArrayAccess MINUSEQ . exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 252
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 170

   88 set_operation: ArrayAccess PLUSEQ . exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 253
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 171

  163 assignment: ArrayAccess assgn_exp .

    $default  reduce using rule 163 (assignment)


State 172

   91 set_operation: field_access MINUSEQ . exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 254
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 173

   90 set_operation: field_access PLUSEQ . exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 255
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 174

  162 assignment: field_access assgn_exp .

    $default  reduce using rule 162 (assignment)


State 175

   35 return_statement: BREAK VARIABLE ';' .

    $default  reduce using rule 35 (return_statement)


State 176

   92 function_call: . VARIABLE '(' ')'
   92              | VARIABLE '(' . ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   93              | VARIABLE '(' . nonempty_args_list ')'
   94 nonempty_args_list: . exp
   95                   | . lambda_exp
   96                   | . exp ',' nonempty_args_list
   97                   | . lambda_exp ',' nonempty_args_list
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  176 lambda_exp: . '(' args_list ARROW exp
  177           | . '(' args_list ARROW block
  178           | . '(' ')' ARROW exp
  179           | . '(' ')' ARROW block
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 199
    ')'            shift, and go to state 256
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    nonempty_args_list           go to state 202
    exp                          go to state 204
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    lambda_exp                   go to state 205
    dialogueact_exp              go to state 78


State 177

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  158            | VARIABLE '[' . exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 209
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 178

   42 while_statement: DO statement WHILE . '(' exp ')'

    '('  shift, and go to state 257


State 179

   48 for_statement: FOR '(' VARIABLE . ':' exp ')' statement
   98 type_spec: VARIABLE . '[' ']'
   99          | VARIABLE .  [VARIABLE]
  101 parameterized_type: VARIABLE . '<' type_spec_list '>'

    ':'  shift, and go to state 258
    '['  shift, and go to state 219
    '<'  shift, and go to state 113

    $default  reduce using rule 99 (type_spec)


State 180

   47 for_statement: FOR '(' ';' . exp ';' exp ')' statement
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 259
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 181

   43 for_statement: FOR '(' var_def . exp ';' exp ')' statement
   44              | FOR '(' var_def . ';' exp ')' statement
   45              | FOR '(' var_def . exp ';' ')' statement
   46              | FOR '(' var_def . ';' ')' statement
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    ';'            shift, and go to state 260
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 261
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 182

   49 for_statement: FOR '(' type_spec . VARIABLE ':' exp ')' statement
   64 var_def: type_spec . VARIABLE assgn_exp ';'

    VARIABLE  shift, and go to state 262


State 183

   39 if_statement: IF '(' exp . ')' statement
   40             | IF '(' exp . ')' statement ELSE statement
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 263
    '?'  shift, and go to state 149


State 184

   12 path: '.' . VARIABLE path

    VARIABLE  shift, and go to state 264


State 185

   10 imports: IMPORT VARIABLE path . ';'

    ';'  shift, and go to state 265


State 186

   69 nonempty_exp_list: . exp
   70                  | . exp ',' nonempty_exp_list
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  171        | NEW VARIABLE '(' . ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  172        | NEW VARIABLE '(' . nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    ')'            shift, and go to state 266
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    nonempty_exp_list            go to state 267
    function_call                go to state 51
    exp                          go to state 268
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 187

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  175        | NEW VARIABLE '[' . exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 269
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 188

   69 nonempty_exp_list: . exp
   70                  | . exp ',' nonempty_exp_list
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  173        | NEW parameterized_type '(' . ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  174        | NEW parameterized_type '(' . nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    ')'            shift, and go to state 270
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    nonempty_exp_list            go to state 271
    function_call                go to state 51
    exp                          go to state 268
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 189

   50 propose_statement: PROPOSE '(' exp . ')' block
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 272
    '?'  shift, and go to state 149


State 190

   33 return_statement: RETURN exp ';' .

    $default  reduce using rule 33 (return_statement)


State 191

   53 switch_statement: SWITCH '(' exp . ')' '{' switch_block '}'
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 273
    '?'  shift, and go to state 149


State 192

   52 timeout_statement: TIMEOUT '(' exp . ',' exp ')' block
  160 if_exp: exp . '?' exp ':' exp

    ','  shift, and go to state 274
    '?'  shift, and go to state 149


State 193

   51 timeout_behaviour_statement: TIMEOUT_BEHAVIOUR '(' exp . ')' block
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 275
    '?'  shift, and go to state 149


State 194

   41 while_statement: WHILE '(' exp . ')' statement
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 276
    '?'  shift, and go to state 149


State 195

   87 set_operation: VARIABLE MINUSEQ exp . ';'
  160 if_exp: exp . '?' exp ':' exp

    ';'  shift, and go to state 277
    '?'  shift, and go to state 149


State 196

   86 set_operation: VARIABLE PLUSEQ exp . ';'
  160 if_exp: exp . '?' exp ':' exp

    ';'  shift, and go to state 278
    '?'  shift, and go to state 149


State 197

   31 grammar_rule: VARIABLE ':' if_statement .

    $default  reduce using rule 31 (grammar_rule)


State 198

   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
   82 args_list: VARIABLE . ')'
   84          | VARIABLE . ',' args_list
   92 function_call: VARIABLE . '(' ')'
   93              | VARIABLE . '(' nonempty_args_list ')'
   98 type_spec: VARIABLE . '[' ']'
   99          | VARIABLE .  [VARIABLE, ')']
  101 parameterized_type: VARIABLE . '<' type_spec_list '>'
  147 NotJustName: VARIABLE .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, '.', ')', ',', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']
  158 ArrayAccess: VARIABLE . '[' exp ']'
  161 assignment: VARIABLE . assgn_exp

    '('  shift, and go to state 176
    ')'  shift, and go to state 279
    ','  shift, and go to state 280
    '='  shift, and go to state 111
    '['  shift, and go to state 112
    '<'  shift, and go to state 113

    VARIABLE  reduce using rule 99 (type_spec)
    ')'       [reduce using rule 99 (type_spec)]
    ')'       [reduce using rule 147 (NotJustName)]
    ','       [reduce using rule 147 (NotJustName)]
    '<'       [reduce using rule 147 (NotJustName)]
    $default  reduce using rule 147 (NotJustName)

    assgn_exp  go to state 114


State 199

   82 args_list: . VARIABLE ')'
   83          | . type_spec VARIABLE ')'
   84          | . VARIABLE ',' args_list
   85          | . type_spec VARIABLE ',' args_list
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  134               | '(' . type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  149               | '(' . exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  176 lambda_exp: '(' . args_list ARROW exp
  177           | '(' . args_list ARROW block
  178           | '(' . ')' ARROW exp
  179           | '(' . ')' ARROW block
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 198
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    ')'            shift, and go to state 281
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    args_list                    go to state 282
    function_call                go to state 51
    type_spec                    go to state 283
    parameterized_type           go to state 53
    exp                          go to state 125
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 200

   27 block: . '{' statements '}'
   28      | . '{' '}'
   77 method_declaration: VARIABLE '(' ')' . block
   92 function_call: VARIABLE '(' ')' .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '[', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']

    '{'  shift, and go to state 26

    $default  reduce using rule 92 (function_call)

    block  go to state 284


State 201

   27 block: . '{' statements '}'
   28      | . '{' '}'
   78 method_declaration: VARIABLE '(' args_list . block

    '{'  shift, and go to state 26

    block  go to state 285


State 202

   93 function_call: VARIABLE '(' nonempty_args_list . ')'

    ')'  shift, and go to state 286


State 203

   83 args_list: type_spec . VARIABLE ')'
   85          | type_spec . VARIABLE ',' args_list

    VARIABLE  shift, and go to state 287


State 204

   94 nonempty_args_list: exp .  [')']
   96                   | exp . ',' nonempty_args_list
  160 if_exp: exp . '?' exp ':' exp

    ','  shift, and go to state 288
    '?'  shift, and go to state 149

    $default  reduce using rule 94 (nonempty_args_list)


State 205

   95 nonempty_args_list: lambda_exp .  [')']
   97                   | lambda_exp . ',' nonempty_args_list

    ','  shift, and go to state 289

    $default  reduce using rule 95 (nonempty_args_list)


State 206

   67 assgn_exp: '=' '{' . '}'
   68          | '=' '{' . nonempty_exp_list '}'
   69 nonempty_exp_list: . exp
   70                  | . exp ',' nonempty_exp_list
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '}'            shift, and go to state 290
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    nonempty_exp_list            go to state 291
    function_call                go to state 51
    exp                          go to state 268
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 207

   66 assgn_exp: '=' exp .  [';', '}', ':', '(', ')', ',', '=', ']', '?']
  160 if_exp: exp . '?' exp ':' exp

    '?'  shift, and go to state 149

    '?'       [reduce using rule 66 (assgn_exp)]
    $default  reduce using rule 66 (assgn_exp)


State 208

   98 type_spec: VARIABLE '[' ']' .

    $default  reduce using rule 98 (type_spec)


State 209

  158 ArrayAccess: VARIABLE '[' exp . ']'
  160 if_exp: exp . '?' exp ':' exp

    ']'  shift, and go to state 292
    '?'  shift, and go to state 149


State 210

  102 type_spec_list: type_spec .  ['>']
  103               | type_spec . ',' type_spec_list

    ','  shift, and go to state 293

    $default  reduce using rule 102 (type_spec_list)


State 211

  101 parameterized_type: VARIABLE '<' type_spec_list . '>'

    '>'  shift, and go to state 294


State 212

   63 var_def: FINAL VARIABLE . assgn_exp ';'
   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
   98 type_spec: VARIABLE . '[' ']'
   99          | VARIABLE .  [VARIABLE]
  101 parameterized_type: VARIABLE . '<' type_spec_list '>'

    '='  shift, and go to state 111
    '['  shift, and go to state 219
    '<'  shift, and go to state 113

    $default  reduce using rule 99 (type_spec)

    assgn_exp  go to state 295


State 213

   65 var_def: FINAL type_spec . VARIABLE assgn_exp ';'

    VARIABLE  shift, and go to state 296


State 214

   30 statements: blk_statement statements .

    $default  reduce using rule 30 (statements)


State 215

   27 block: '{' statements '}' .

    $default  reduce using rule 27 (block)


State 216

   64 var_def: type_spec VARIABLE . assgn_exp ';'
   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'

    '='  shift, and go to state 111

    assgn_exp  go to state 297


State 217

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  134               | '(' type_spec ')' . CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 101
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32

    function_call                go to state 51
    CastExpression               go to state 298
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 104
    field_access                 go to state 105
    new_exp                      go to state 77


State 218

  149 ComplexPrimary: '(' exp ')' .

    $default  reduce using rule 149 (ComplexPrimary)


State 219

   98 type_spec: VARIABLE '[' . ']'

    ']'  shift, and go to state 208


State 220

   79 class_spec: '[' type_spec '.' . ']'

    ']'  shift, and go to state 299


State 221

  160 if_exp: exp . '?' exp ':' exp
  182 da_token: '^' exp .  ['(', ')', ',', '=']

    '?'  shift, and go to state 149

    $default  reduce using rule 182 (da_token)


State 222

  180 dialogueact_exp: '#' da_token '(' . da_token ')'
  181                | '#' da_token '(' . da_token da_args ')'
  182 da_token: . '^' exp
  183         | . VARIABLE
  184         | . STRING
  185         | . WILDCARD

    STRING    shift, and go to state 132
    WILDCARD  shift, and go to state 133
    VARIABLE  shift, and go to state 134
    '^'       shift, and go to state 135

    da_token  go to state 300


State 223

   77 method_declaration: VARIABLE '(' . ')' block
   78                   | VARIABLE '(' . args_list block
   82 args_list: . VARIABLE ')'
   83          | . type_spec VARIABLE ')'
   84          | . VARIABLE ',' args_list
   85          | . type_spec VARIABLE ',' args_list
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    VARIABLE  shift, and go to state 301
    ')'       shift, and go to state 302

    args_list           go to state 201
    type_spec           go to state 203
    parameterized_type  go to state 53


State 224

    5 grammar_file: visibility_spec var_def grammar_file .

    $default  reduce using rule 5 (grammar_file)


State 225

    1 grammar_file: visibility_spec method_declaration grammar_file .

    $default  reduce using rule 1 (grammar_file)


State 226

   64 var_def: type_spec VARIABLE . assgn_exp ';'
   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'
   75 method_declaration: type_spec VARIABLE . '(' ')' opt_block
   76                   | type_spec VARIABLE . '(' args_list opt_block

    '('  shift, and go to state 229
    '='  shift, and go to state 111

    assgn_exp  go to state 297


State 227

   73 method_declaration: class_spec VARIABLE '(' . ')' opt_block
   74                   | class_spec VARIABLE '(' . args_list opt_block
   82 args_list: . VARIABLE ')'
   83          | . type_spec VARIABLE ')'
   84          | . VARIABLE ',' args_list
   85          | . type_spec VARIABLE ',' args_list
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    VARIABLE  shift, and go to state 301
    ')'       shift, and go to state 303

    args_list           go to state 304
    type_spec           go to state 203
    parameterized_type  go to state 53


State 228

   71 method_declaration: class_spec type_spec VARIABLE . '(' ')' opt_block
   72                   | class_spec type_spec VARIABLE . '(' args_list opt_block

    '('  shift, and go to state 305


State 229

   75 method_declaration: type_spec VARIABLE '(' . ')' opt_block
   76                   | type_spec VARIABLE '(' . args_list opt_block
   82 args_list: . VARIABLE ')'
   83          | . type_spec VARIABLE ')'
   84          | . VARIABLE ',' args_list
   85          | . type_spec VARIABLE ',' args_list
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    VARIABLE  shift, and go to state 301
    ')'       shift, and go to state 306

    args_list           go to state 307
    type_spec           go to state 203
    parameterized_type  go to state 53


State 230

  160 if_exp: exp . '?' exp ':' exp
  160       | exp '?' exp . ':' exp

    ':'  shift, and go to state 308
    '?'  shift, and go to state 149


State 231

  108 ConditionalOrExpression: ConditionalOrExpression OROR ConditionalAndExpression .  [OROR, ';', '}', ':', '(', ')', ',', '=', ']', '?']
  110 ConditionalAndExpression: ConditionalAndExpression . ANDAND InclusiveOrExpression

    ANDAND  shift, and go to state 151

    $default  reduce using rule 108 (ConditionalOrExpression)


State 232

  110 ConditionalAndExpression: ConditionalAndExpression ANDAND InclusiveOrExpression .  [ANDAND, OROR, ';', '}', ':', '(', ')', ',', '=', ']', '?']
  113 InclusiveOrExpression: InclusiveOrExpression . '|' ExclusiveOrExpression

    '|'  shift, and go to state 152

    $default  reduce using rule 110 (ConditionalAndExpression)


State 233

  113 InclusiveOrExpression: InclusiveOrExpression '|' ExclusiveOrExpression .  [ANDAND, OROR, ';', '}', ':', '(', ')', ',', '=', ']', '|', '?']
  115 ExclusiveOrExpression: ExclusiveOrExpression . '^' AndExpression

    '^'  shift, and go to state 153

    $default  reduce using rule 113 (InclusiveOrExpression)


State 234

  115 ExclusiveOrExpression: ExclusiveOrExpression '^' AndExpression .  [ANDAND, OROR, ';', '}', ':', '(', ')', ',', '=', ']', '|', '^', '?']
  117 AndExpression: AndExpression . '&' EqualityExpression

    '&'  shift, and go to state 154

    $default  reduce using rule 115 (ExclusiveOrExpression)


State 235

  117 AndExpression: AndExpression '&' EqualityExpression .  [ANDAND, OROR, ';', '}', ':', '(', ')', ',', '=', ']', '|', '^', '&', '?']
  119 EqualityExpression: EqualityExpression . EQEQ RelationalExpression
  120                   | EqualityExpression . NOTEQ RelationalExpression

    EQEQ   shift, and go to state 155
    NOTEQ  shift, and go to state 156

    $default  reduce using rule 117 (AndExpression)


State 236

  119 EqualityExpression: EqualityExpression EQEQ RelationalExpression .  [ANDAND, OROR, EQEQ, NOTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '|', '^', '&', '?']
  122 RelationalExpression: RelationalExpression . '<' AdditiveExpression
  123                     | RelationalExpression . '>' AdditiveExpression
  124                     | RelationalExpression . GTEQ AdditiveExpression
  125                     | RelationalExpression . LTEQ AdditiveExpression

    GTEQ  shift, and go to state 157
    LTEQ  shift, and go to state 158
    '<'   shift, and go to state 159
    '>'   shift, and go to state 160

    $default  reduce using rule 119 (EqualityExpression)


State 237

  120 EqualityExpression: EqualityExpression NOTEQ RelationalExpression .  [ANDAND, OROR, EQEQ, NOTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '|', '^', '&', '?']
  122 RelationalExpression: RelationalExpression . '<' AdditiveExpression
  123                     | RelationalExpression . '>' AdditiveExpression
  124                     | RelationalExpression . GTEQ AdditiveExpression
  125                     | RelationalExpression . LTEQ AdditiveExpression

    GTEQ  shift, and go to state 157
    LTEQ  shift, and go to state 158
    '<'   shift, and go to state 159
    '>'   shift, and go to state 160

    $default  reduce using rule 120 (EqualityExpression)


State 238

  124 RelationalExpression: RelationalExpression GTEQ AdditiveExpression .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '?']
  127 AdditiveExpression: AdditiveExpression . '+' MultiplicativeExpression
  128                   | AdditiveExpression . '-' MultiplicativeExpression

    '+'  shift, and go to state 161
    '-'  shift, and go to state 162

    $default  reduce using rule 124 (RelationalExpression)


State 239

  125 RelationalExpression: RelationalExpression LTEQ AdditiveExpression .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '?']
  127 AdditiveExpression: AdditiveExpression . '+' MultiplicativeExpression
  128                   | AdditiveExpression . '-' MultiplicativeExpression

    '+'  shift, and go to state 161
    '-'  shift, and go to state 162

    $default  reduce using rule 125 (RelationalExpression)


State 240

  122 RelationalExpression: RelationalExpression '<' AdditiveExpression .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '?']
  127 AdditiveExpression: AdditiveExpression . '+' MultiplicativeExpression
  128                   | AdditiveExpression . '-' MultiplicativeExpression

    '+'  shift, and go to state 161
    '-'  shift, and go to state 162

    $default  reduce using rule 122 (RelationalExpression)


State 241

  123 RelationalExpression: RelationalExpression '>' AdditiveExpression .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '?']
  127 AdditiveExpression: AdditiveExpression . '+' MultiplicativeExpression
  128                   | AdditiveExpression . '-' MultiplicativeExpression

    '+'  shift, and go to state 161
    '-'  shift, and go to state 162

    $default  reduce using rule 123 (RelationalExpression)


State 242

  127 AdditiveExpression: AdditiveExpression '+' MultiplicativeExpression .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '+', '-', '?']
  130 MultiplicativeExpression: MultiplicativeExpression . '*' CastExpression
  131                         | MultiplicativeExpression . '/' CastExpression
  132                         | MultiplicativeExpression . '%' CastExpression

    '*'  shift, and go to state 163
    '/'  shift, and go to state 164
    '%'  shift, and go to state 165

    $default  reduce using rule 127 (AdditiveExpression)


State 243

  128 AdditiveExpression: AdditiveExpression '-' MultiplicativeExpression .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, ';', '}', ':', '(', ')', ',', '=', ']', '<', '>', '|', '^', '&', '+', '-', '?']
  130 MultiplicativeExpression: MultiplicativeExpression . '*' CastExpression
  131                         | MultiplicativeExpression . '/' CastExpression
  132                         | MultiplicativeExpression . '%' CastExpression

    '*'  shift, and go to state 163
    '/'  shift, and go to state 164
    '%'  shift, and go to state 165

    $default  reduce using rule 128 (AdditiveExpression)


State 244

  130 MultiplicativeExpression: MultiplicativeExpression '*' CastExpression .

    $default  reduce using rule 130 (MultiplicativeExpression)


State 245

  131 MultiplicativeExpression: MultiplicativeExpression '/' CastExpression .

    $default  reduce using rule 131 (MultiplicativeExpression)


State 246

  132 MultiplicativeExpression: MultiplicativeExpression '%' CastExpression .

    $default  reduce using rule 132 (MultiplicativeExpression)


State 247

   92 function_call: VARIABLE . '(' ')'
   93              | VARIABLE . '(' nonempty_args_list ')'
  167 simple_nofa_exp: VARIABLE .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, MINUSEQ, PLUSEQ, ';', '.', '}', ':', '(', ')', ',', '=', '[', ']', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']

    '('  shift, and go to state 176

    '('       [reduce using rule 167 (simple_nofa_exp)]
    $default  reduce using rule 167 (simple_nofa_exp)


State 248

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  169 simple_nofa_exp: '(' . exp ')'
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 309
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 249

  168 simple_nofa_exp: function_call .

    $default  reduce using rule 168 (simple_nofa_exp)


State 250

  165 field_access_rest: . '.' simple_nofa_exp field_access_rest
  165                  | '.' simple_nofa_exp . field_access_rest
  166                  | . '.' simple_nofa_exp
  166                  | '.' simple_nofa_exp .  [ANDAND, OROR, EQEQ, NOTEQ, GTEQ, LTEQ, MINUSEQ, PLUSEQ, ';', '}', ':', '(', ')', ',', '=', '[', ']', '<', '>', '|', '^', '&', '+', '-', '*', '/', '%', '?']

    '.'  shift, and go to state 166

    $default  reduce using rule 166 (field_access_rest)

    field_access_rest  go to state 310


State 251

  159 ArrayAccess: ComplexPrimary '[' exp . ']'
  160 if_exp: exp . '?' exp ':' exp

    ']'  shift, and go to state 311
    '?'  shift, and go to state 149


State 252

   89 set_operation: ArrayAccess MINUSEQ exp . ';'
  160 if_exp: exp . '?' exp ':' exp

    ';'  shift, and go to state 312
    '?'  shift, and go to state 149


State 253

   88 set_operation: ArrayAccess PLUSEQ exp . ';'
  160 if_exp: exp . '?' exp ':' exp

    ';'  shift, and go to state 313
    '?'  shift, and go to state 149


State 254

   91 set_operation: field_access MINUSEQ exp . ';'
  160 if_exp: exp . '?' exp ':' exp

    ';'  shift, and go to state 314
    '?'  shift, and go to state 149


State 255

   90 set_operation: field_access PLUSEQ exp . ';'
  160 if_exp: exp . '?' exp ':' exp

    ';'  shift, and go to state 315
    '?'  shift, and go to state 149


State 256

   92 function_call: VARIABLE '(' ')' .

    $default  reduce using rule 92 (function_call)


State 257

   42 while_statement: DO statement WHILE '(' . exp ')'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 316
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 258

   48 for_statement: FOR '(' VARIABLE ':' . exp ')' statement
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 317
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 259

   47 for_statement: FOR '(' ';' exp . ';' exp ')' statement
  160 if_exp: exp . '?' exp ':' exp

    ';'  shift, and go to state 318
    '?'  shift, and go to state 149


State 260

   44 for_statement: FOR '(' var_def ';' . exp ')' statement
   46              | FOR '(' var_def ';' . ')' statement
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    ')'            shift, and go to state 319
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 320
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 261

   43 for_statement: FOR '(' var_def exp . ';' exp ')' statement
   45              | FOR '(' var_def exp . ';' ')' statement
  160 if_exp: exp . '?' exp ':' exp

    ';'  shift, and go to state 321
    '?'  shift, and go to state 149


State 262

   49 for_statement: FOR '(' type_spec VARIABLE . ':' exp ')' statement
   64 var_def: type_spec VARIABLE . assgn_exp ';'
   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'

    ':'  shift, and go to state 322
    '='  shift, and go to state 111

    assgn_exp  go to state 297


State 263

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   39             | IF '(' exp ')' . statement
   40             | . IF '(' exp ')' statement ELSE statement
   40             | IF '(' exp ')' . statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 323
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 264

   11 path: . %empty  [';']
   12     | . '.' VARIABLE path
   12     | '.' VARIABLE . path

    '.'  shift, and go to state 184

    $default  reduce using rule 11 (path)

    path  go to state 324


State 265

   10 imports: IMPORT VARIABLE path ';' .

    $default  reduce using rule 10 (imports)


State 266

  171 new_exp: NEW VARIABLE '(' ')' .

    $default  reduce using rule 171 (new_exp)


State 267

  172 new_exp: NEW VARIABLE '(' nonempty_exp_list . ')'

    ')'  shift, and go to state 325


State 268

   69 nonempty_exp_list: exp .  ['}', ')']
   70                  | exp . ',' nonempty_exp_list
  160 if_exp: exp . '?' exp ':' exp

    ','  shift, and go to state 326
    '?'  shift, and go to state 149

    $default  reduce using rule 69 (nonempty_exp_list)


State 269

  160 if_exp: exp . '?' exp ':' exp
  175 new_exp: NEW VARIABLE '[' exp . ']'

    ']'  shift, and go to state 327
    '?'  shift, and go to state 149


State 270

  173 new_exp: NEW parameterized_type '(' ')' .

    $default  reduce using rule 173 (new_exp)


State 271

  174 new_exp: NEW parameterized_type '(' nonempty_exp_list . ')'

    ')'  shift, and go to state 328


State 272

   27 block: . '{' statements '}'
   28      | . '{' '}'
   50 propose_statement: PROPOSE '(' exp ')' . block

    '{'  shift, and go to state 26

    block  go to state 329


State 273

   53 switch_statement: SWITCH '(' exp ')' . '{' switch_block '}'

    '{'  shift, and go to state 330


State 274

   52 timeout_statement: TIMEOUT '(' exp ',' . exp ')' block
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 331
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 275

   27 block: . '{' statements '}'
   28      | . '{' '}'
   51 timeout_behaviour_statement: TIMEOUT_BEHAVIOUR '(' exp ')' . block

    '{'  shift, and go to state 26

    block  go to state 332


State 276

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   41                | WHILE '(' exp ')' . statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 333
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 277

   87 set_operation: VARIABLE MINUSEQ exp ';' .

    $default  reduce using rule 87 (set_operation)


State 278

   86 set_operation: VARIABLE PLUSEQ exp ';' .

    $default  reduce using rule 86 (set_operation)


State 279

   82 args_list: VARIABLE ')' .

    $default  reduce using rule 82 (args_list)


State 280

   82 args_list: . VARIABLE ')'
   83          | . type_spec VARIABLE ')'
   84          | . VARIABLE ',' args_list
   84          | VARIABLE ',' . args_list
   85          | . type_spec VARIABLE ',' args_list
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    VARIABLE  shift, and go to state 301

    args_list           go to state 334
    type_spec           go to state 203
    parameterized_type  go to state 53


State 281

  178 lambda_exp: '(' ')' . ARROW exp
  179           | '(' ')' . ARROW block

    ARROW  shift, and go to state 335


State 282

  176 lambda_exp: '(' args_list . ARROW exp
  177           | '(' args_list . ARROW block

    ARROW  shift, and go to state 336


State 283

   83 args_list: type_spec . VARIABLE ')'
   85          | type_spec . VARIABLE ',' args_list
  134 CastExpression: '(' type_spec . ')' CastExpression

    VARIABLE  shift, and go to state 287
    ')'       shift, and go to state 217


State 284

   77 method_declaration: VARIABLE '(' ')' block .

    $default  reduce using rule 77 (method_declaration)


State 285

   78 method_declaration: VARIABLE '(' args_list block .

    $default  reduce using rule 78 (method_declaration)


State 286

   93 function_call: VARIABLE '(' nonempty_args_list ')' .

    $default  reduce using rule 93 (function_call)


State 287

   83 args_list: type_spec VARIABLE . ')'
   85          | type_spec VARIABLE . ',' args_list

    ')'  shift, and go to state 337
    ','  shift, and go to state 338


State 288

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   94 nonempty_args_list: . exp
   95                   | . lambda_exp
   96                   | . exp ',' nonempty_args_list
   96                   | exp ',' . nonempty_args_list
   97                   | . lambda_exp ',' nonempty_args_list
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  176 lambda_exp: . '(' args_list ARROW exp
  177           | . '(' args_list ARROW block
  178           | . '(' ')' ARROW exp
  179           | . '(' ')' ARROW block
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 199
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    nonempty_args_list           go to state 339
    exp                          go to state 204
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    lambda_exp                   go to state 205
    dialogueact_exp              go to state 78


State 289

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   94 nonempty_args_list: . exp
   95                   | . lambda_exp
   96                   | . exp ',' nonempty_args_list
   97                   | . lambda_exp ',' nonempty_args_list
   97                   | lambda_exp ',' . nonempty_args_list
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  176 lambda_exp: . '(' args_list ARROW exp
  177           | . '(' args_list ARROW block
  178           | . '(' ')' ARROW exp
  179           | . '(' ')' ARROW block
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 199
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    nonempty_args_list           go to state 340
    exp                          go to state 204
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    lambda_exp                   go to state 205
    dialogueact_exp              go to state 78


State 290

   67 assgn_exp: '=' '{' '}' .

    $default  reduce using rule 67 (assgn_exp)


State 291

   68 assgn_exp: '=' '{' nonempty_exp_list . '}'

    '}'  shift, and go to state 341


State 292

  158 ArrayAccess: VARIABLE '[' exp ']' .

    $default  reduce using rule 158 (ArrayAccess)


State 293

   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  102 type_spec_list: . type_spec
  103               | . type_spec ',' type_spec_list
  103               | type_spec ',' . type_spec_list

    VARIABLE  shift, and go to state 126

    type_spec           go to state 210
    parameterized_type  go to state 53
    type_spec_list      go to state 342


State 294

  101 parameterized_type: VARIABLE '<' type_spec_list '>' .

    $default  reduce using rule 101 (parameterized_type)


State 295

   63 var_def: FINAL VARIABLE assgn_exp . ';'

    ';'  shift, and go to state 343


State 296

   65 var_def: FINAL type_spec VARIABLE . assgn_exp ';'
   66 assgn_exp: . '=' exp
   67          | . '=' '{' '}'
   68          | . '=' '{' nonempty_exp_list '}'

    '='  shift, and go to state 111

    assgn_exp  go to state 344


State 297

   64 var_def: type_spec VARIABLE assgn_exp . ';'

    ';'  shift, and go to state 345


State 298

  134 CastExpression: '(' type_spec ')' CastExpression .

    $default  reduce using rule 134 (CastExpression)


State 299

   79 class_spec: '[' type_spec '.' ']' .

    $default  reduce using rule 79 (class_spec)


State 300

  180 dialogueact_exp: '#' da_token '(' da_token . ')'
  181                | '#' da_token '(' da_token . da_args ')'
  186 da_args: . ',' da_token '=' da_token da_args
  187        | . %empty  [')']

    ')'  shift, and go to state 346
    ','  shift, and go to state 347

    ')'  [reduce using rule 187 (da_args)]

    da_args  go to state 348


State 301

   82 args_list: VARIABLE . ')'
   84          | VARIABLE . ',' args_list
   98 type_spec: VARIABLE . '[' ']'
   99          | VARIABLE .  [VARIABLE]
  101 parameterized_type: VARIABLE . '<' type_spec_list '>'

    ')'  shift, and go to state 279
    ','  shift, and go to state 280
    '['  shift, and go to state 219
    '<'  shift, and go to state 113

    $default  reduce using rule 99 (type_spec)


State 302

   27 block: . '{' statements '}'
   28      | . '{' '}'
   77 method_declaration: VARIABLE '(' ')' . block

    '{'  shift, and go to state 26

    block  go to state 284


State 303

   27 block: . '{' statements '}'
   28      | . '{' '}'
   73 method_declaration: class_spec VARIABLE '(' ')' . opt_block
   80 opt_block: . block
   81          | . ';'

    ';'  shift, and go to state 349
    '{'  shift, and go to state 26

    block      go to state 350
    opt_block  go to state 351


State 304

   27 block: . '{' statements '}'
   28      | . '{' '}'
   74 method_declaration: class_spec VARIABLE '(' args_list . opt_block
   80 opt_block: . block
   81          | . ';'

    ';'  shift, and go to state 349
    '{'  shift, and go to state 26

    block      go to state 350
    opt_block  go to state 352


State 305

   71 method_declaration: class_spec type_spec VARIABLE '(' . ')' opt_block
   72                   | class_spec type_spec VARIABLE '(' . args_list opt_block
   82 args_list: . VARIABLE ')'
   83          | . type_spec VARIABLE ')'
   84          | . VARIABLE ',' args_list
   85          | . type_spec VARIABLE ',' args_list
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    VARIABLE  shift, and go to state 301
    ')'       shift, and go to state 353

    args_list           go to state 354
    type_spec           go to state 203
    parameterized_type  go to state 53


State 306

   27 block: . '{' statements '}'
   28      | . '{' '}'
   75 method_declaration: type_spec VARIABLE '(' ')' . opt_block
   80 opt_block: . block
   81          | . ';'

    ';'  shift, and go to state 349
    '{'  shift, and go to state 26

    block      go to state 350
    opt_block  go to state 355


State 307

   27 block: . '{' statements '}'
   28      | . '{' '}'
   76 method_declaration: type_spec VARIABLE '(' args_list . opt_block
   80 opt_block: . block
   81          | . ';'

    ';'  shift, and go to state 349
    '{'  shift, and go to state 26

    block      go to state 350
    opt_block  go to state 356


State 308

   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  160       | exp '?' exp ':' . exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 357
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 309

  160 if_exp: exp . '?' exp ':' exp
  169 simple_nofa_exp: '(' exp . ')'

    ')'  shift, and go to state 358
    '?'  shift, and go to state 149


State 310

  165 field_access_rest: '.' simple_nofa_exp field_access_rest .

    $default  reduce using rule 165 (field_access_rest)


State 311

  159 ArrayAccess: ComplexPrimary '[' exp ']' .

    $default  reduce using rule 159 (ArrayAccess)


State 312

   89 set_operation: ArrayAccess MINUSEQ exp ';' .

    $default  reduce using rule 89 (set_operation)


State 313

   88 set_operation: ArrayAccess PLUSEQ exp ';' .

    $default  reduce using rule 88 (set_operation)


State 314

   91 set_operation: field_access MINUSEQ exp ';' .

    $default  reduce using rule 91 (set_operation)


State 315

   90 set_operation: field_access PLUSEQ exp ';' .

    $default  reduce using rule 90 (set_operation)


State 316

   42 while_statement: DO statement WHILE '(' exp . ')'
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 359
    '?'  shift, and go to state 149


State 317

   48 for_statement: FOR '(' VARIABLE ':' exp . ')' statement
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 360
    '?'  shift, and go to state 149


State 318

   47 for_statement: FOR '(' ';' exp ';' . exp ')' statement
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 361
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 319

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   46              | FOR '(' var_def ';' ')' . statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 362
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 320

   44 for_statement: FOR '(' var_def ';' exp . ')' statement
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 363
    '?'  shift, and go to state 149


State 321

   43 for_statement: FOR '(' var_def exp ';' . exp ')' statement
   45              | FOR '(' var_def exp ';' . ')' statement
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    ')'            shift, and go to state 364
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 365
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 322

   49 for_statement: FOR '(' type_spec VARIABLE ':' . exp ')' statement
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    function_call                go to state 51
    exp                          go to state 366
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 323

   39 if_statement: IF '(' exp ')' statement .  [$end, BREAK, CANCEL, CANCEL_ALL, CASE, CONTINUE, DEFAULT, DO, ELSE, FINAL, FOR, IF, IMPORT, NEW, NULL, PRIVATE, PROPOSE, PROTECTED, PUBLIC, RETURN, SWITCH, TIMEOUT, TIMEOUT_BEHAVIOUR, WHILE, MINUSMINUS, PLUSPLUS, STRING, INT, VARIABLE, OTHER_LITERAL, '{', '}', '(', '[', '+', '-', '!', '~', '#']
   40             | IF '(' exp ')' statement . ELSE statement

    ELSE  shift, and go to state 367

    ELSE      [reduce using rule 39 (if_statement)]
    $default  reduce using rule 39 (if_statement)


State 324

   12 path: '.' VARIABLE path .

    $default  reduce using rule 12 (path)


State 325

  172 new_exp: NEW VARIABLE '(' nonempty_exp_list ')' .

    $default  reduce using rule 172 (new_exp)


State 326

   69 nonempty_exp_list: . exp
   70                  | . exp ',' nonempty_exp_list
   70                  | exp ',' . nonempty_exp_list
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    nonempty_exp_list            go to state 368
    function_call                go to state 51
    exp                          go to state 268
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 327

  175 new_exp: NEW VARIABLE '[' exp ']' .

    $default  reduce using rule 175 (new_exp)


State 328

  174 new_exp: NEW parameterized_type '(' nonempty_exp_list ')' .

    $default  reduce using rule 174 (new_exp)


State 329

   50 propose_statement: PROPOSE '(' exp ')' block .

    $default  reduce using rule 50 (propose_statement)


State 330

   53 switch_statement: SWITCH '(' exp ')' '{' . switch_block '}'
   54 switch_block: . switch_labels switch_cont
   57 switch_labels: . switch_label switch_labels
   58              | . switch_label
   59 switch_label: . CASE STRING ':'
   60             | . CASE INT ':'
   61             | . CASE VARIABLE ':'
   62             | . DEFAULT ':'

    CASE     shift, and go to state 369
    DEFAULT  shift, and go to state 370

    switch_block   go to state 371
    switch_labels  go to state 372
    switch_label   go to state 373


State 331

   52 timeout_statement: TIMEOUT '(' exp ',' exp . ')' block
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 374
    '?'  shift, and go to state 149


State 332

   51 timeout_behaviour_statement: TIMEOUT_BEHAVIOUR '(' exp ')' block .

    $default  reduce using rule 51 (timeout_behaviour_statement)


State 333

   41 while_statement: WHILE '(' exp ')' statement .

    $default  reduce using rule 41 (while_statement)


State 334

   84 args_list: VARIABLE ',' args_list .

    $default  reduce using rule 84 (args_list)


State 335

   27 block: . '{' statements '}'
   28      | . '{' '}'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  178 lambda_exp: '(' ')' ARROW . exp
  179           | '(' ')' ARROW . block
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '{'            shift, and go to state 26
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    block                        go to state 375
    function_call                go to state 51
    exp                          go to state 376
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 336

   27 block: . '{' statements '}'
   28      | . '{' '}'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  176 lambda_exp: '(' args_list ARROW . exp
  177           | '(' args_list ARROW . block
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    NEW            shift, and go to state 9
    NULL           shift, and go to state 10
    MINUSMINUS     shift, and go to state 20
    PLUSPLUS       shift, and go to state 21
    STRING         shift, and go to state 22
    INT            shift, and go to state 23
    VARIABLE       shift, and go to state 92
    OTHER_LITERAL  shift, and go to state 25
    '{'            shift, and go to state 26
    '('            shift, and go to state 27
    '+'            shift, and go to state 29
    '-'            shift, and go to state 30
    '!'            shift, and go to state 31
    '~'            shift, and go to state 32
    '#'            shift, and go to state 33

    block                        go to state 377
    function_call                go to state 51
    exp                          go to state 378
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 95
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 96
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 337

   83 args_list: type_spec VARIABLE ')' .

    $default  reduce using rule 83 (args_list)


State 338

   82 args_list: . VARIABLE ')'
   83          | . type_spec VARIABLE ')'
   84          | . VARIABLE ',' args_list
   85          | . type_spec VARIABLE ',' args_list
   85          | type_spec VARIABLE ',' . args_list
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'

    VARIABLE  shift, and go to state 301

    args_list           go to state 379
    type_spec           go to state 203
    parameterized_type  go to state 53


State 339

   96 nonempty_args_list: exp ',' nonempty_args_list .

    $default  reduce using rule 96 (nonempty_args_list)


State 340

   97 nonempty_args_list: lambda_exp ',' nonempty_args_list .

    $default  reduce using rule 97 (nonempty_args_list)


State 341

   68 assgn_exp: '=' '{' nonempty_exp_list '}' .

    $default  reduce using rule 68 (assgn_exp)


State 342

  103 type_spec_list: type_spec ',' type_spec_list .

    $default  reduce using rule 103 (type_spec_list)


State 343

   63 var_def: FINAL VARIABLE assgn_exp ';' .

    $default  reduce using rule 63 (var_def)


State 344

   65 var_def: FINAL type_spec VARIABLE assgn_exp . ';'

    ';'  shift, and go to state 380


State 345

   64 var_def: type_spec VARIABLE assgn_exp ';' .

    $default  reduce using rule 64 (var_def)


State 346

  180 dialogueact_exp: '#' da_token '(' da_token ')' .

    $default  reduce using rule 180 (dialogueact_exp)


State 347

  182 da_token: . '^' exp
  183         | . VARIABLE
  184         | . STRING
  185         | . WILDCARD
  186 da_args: ',' . da_token '=' da_token da_args

    STRING    shift, and go to state 132
    WILDCARD  shift, and go to state 133
    VARIABLE  shift, and go to state 134
    '^'       shift, and go to state 135

    da_token  go to state 381


State 348

  181 dialogueact_exp: '#' da_token '(' da_token da_args . ')'

    ')'  shift, and go to state 382


State 349

   81 opt_block: ';' .

    $default  reduce using rule 81 (opt_block)


State 350

   80 opt_block: block .

    $default  reduce using rule 80 (opt_block)


State 351

   73 method_declaration: class_spec VARIABLE '(' ')' opt_block .

    $default  reduce using rule 73 (method_declaration)


State 352

   74 method_declaration: class_spec VARIABLE '(' args_list opt_block .

    $default  reduce using rule 74 (method_declaration)


State 353

   27 block: . '{' statements '}'
   28      | . '{' '}'
   71 method_declaration: class_spec type_spec VARIABLE '(' ')' . opt_block
   80 opt_block: . block
   81          | . ';'

    ';'  shift, and go to state 349
    '{'  shift, and go to state 26

    block      go to state 350
    opt_block  go to state 383


State 354

   27 block: . '{' statements '}'
   28      | . '{' '}'
   72 method_declaration: class_spec type_spec VARIABLE '(' args_list . opt_block
   80 opt_block: . block
   81          | . ';'

    ';'  shift, and go to state 349
    '{'  shift, and go to state 26

    block      go to state 350
    opt_block  go to state 384


State 355

   75 method_declaration: type_spec VARIABLE '(' ')' opt_block .

    $default  reduce using rule 75 (method_declaration)


State 356

   76 method_declaration: type_spec VARIABLE '(' args_list opt_block .

    $default  reduce using rule 76 (method_declaration)


State 357

  160 if_exp: exp . '?' exp ':' exp
  160       | exp '?' exp ':' exp .  [';', '}', ':', '(', ')', ',', '=', ']', '?']

    '?'  shift, and go to state 149

    '?'       [reduce using rule 160 (if_exp)]
    $default  reduce using rule 160 (if_exp)


State 358

  169 simple_nofa_exp: '(' exp ')' .

    $default  reduce using rule 169 (simple_nofa_exp)


State 359

   42 while_statement: DO statement WHILE '(' exp ')' .

    $default  reduce using rule 42 (while_statement)


State 360

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   48              | FOR '(' VARIABLE ':' exp ')' . statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 385
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 361

   47 for_statement: FOR '(' ';' exp ';' exp . ')' statement
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 386
    '?'  shift, and go to state 149


State 362

   46 for_statement: FOR '(' var_def ';' ')' statement .

    $default  reduce using rule 46 (for_statement)


State 363

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   44              | FOR '(' var_def ';' exp ')' . statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 387
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 364

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   45              | FOR '(' var_def exp ';' ')' . statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 388
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 365

   43 for_statement: FOR '(' var_def exp ';' exp . ')' statement
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 389
    '?'  shift, and go to state 149


State 366

   49 for_statement: FOR '(' type_spec VARIABLE ':' exp . ')' statement
  160 if_exp: exp . '?' exp ':' exp

    ')'  shift, and go to state 390
    '?'  shift, and go to state 149


State 367

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   40             | IF '(' exp ')' statement ELSE . statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 391
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 368

   70 nonempty_exp_list: exp ',' nonempty_exp_list .

    $default  reduce using rule 70 (nonempty_exp_list)


State 369

   59 switch_label: CASE . STRING ':'
   60             | CASE . INT ':'
   61             | CASE . VARIABLE ':'

    STRING    shift, and go to state 392
    INT       shift, and go to state 393
    VARIABLE  shift, and go to state 394


State 370

   62 switch_label: DEFAULT . ':'

    ':'  shift, and go to state 395


State 371

   53 switch_statement: SWITCH '(' exp ')' '{' switch_block . '}'

    '}'  shift, and go to state 396


State 372

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   25 blk_statement: . statement
   26              | . var_def
   27 block: . '{' statements '}'
   28      | . '{' '}'
   29 statements: . blk_statement
   30           | . blk_statement statements
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   54 switch_block: switch_labels . switch_cont
   55 switch_cont: . statements switch_labels switch_cont
   56            | . %empty  ['}']
   63 var_def: . FINAL VARIABLE assgn_exp ';'
   64        | . type_spec VARIABLE assgn_exp ';'
   65        | . FINAL type_spec VARIABLE assgn_exp ';'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FINAL              shift, and go to state 115
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 116
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    $default  reduce using rule 56 (switch_cont)

    statement                    go to state 118
    blk_statement                go to state 119
    block                        go to state 38
    statements                   go to state 397
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    switch_cont                  go to state 398
    var_def                      go to state 121
    set_operation                go to state 50
    function_call                go to state 51
    type_spec                    go to state 122
    parameterized_type           go to state 53
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 373

   57 switch_labels: . switch_label switch_labels
   57              | switch_label . switch_labels
   58              | . switch_label
   58              | switch_label .  [BREAK, CANCEL, CANCEL_ALL, CONTINUE, DO, FINAL, FOR, IF, NEW, NULL, PROPOSE, RETURN, SWITCH, TIMEOUT, TIMEOUT_BEHAVIOUR, WHILE, MINUSMINUS, PLUSPLUS, STRING, INT, VARIABLE, OTHER_LITERAL, '{', '}', '(', '+', '-', '!', '~', '#']
   59 switch_label: . CASE STRING ':'
   60             | . CASE INT ':'
   61             | . CASE VARIABLE ':'
   62             | . DEFAULT ':'

    CASE     shift, and go to state 369
    DEFAULT  shift, and go to state 370

    $default  reduce using rule 58 (switch_labels)

    switch_labels  go to state 399
    switch_label   go to state 373


State 374

   27 block: . '{' statements '}'
   28      | . '{' '}'
   52 timeout_statement: TIMEOUT '(' exp ',' exp ')' . block

    '{'  shift, and go to state 26

    block  go to state 400


State 375

  179 lambda_exp: '(' ')' ARROW block .

    $default  reduce using rule 179 (lambda_exp)


State 376

  160 if_exp: exp . '?' exp ':' exp
  178 lambda_exp: '(' ')' ARROW exp .  [')', ',']

    '?'  shift, and go to state 149

    $default  reduce using rule 178 (lambda_exp)


State 377

  177 lambda_exp: '(' args_list ARROW block .

    $default  reduce using rule 177 (lambda_exp)


State 378

  160 if_exp: exp . '?' exp ':' exp
  176 lambda_exp: '(' args_list ARROW exp .  [')', ',']

    '?'  shift, and go to state 149

    $default  reduce using rule 176 (lambda_exp)


State 379

   85 args_list: type_spec VARIABLE ',' args_list .

    $default  reduce using rule 85 (args_list)


State 380

   65 var_def: FINAL type_spec VARIABLE assgn_exp ';' .

    $default  reduce using rule 65 (var_def)


State 381

  186 da_args: ',' da_token . '=' da_token da_args

    '='  shift, and go to state 401


State 382

  181 dialogueact_exp: '#' da_token '(' da_token da_args ')' .

    $default  reduce using rule 181 (dialogueact_exp)


State 383

   71 method_declaration: class_spec type_spec VARIABLE '(' ')' opt_block .

    $default  reduce using rule 71 (method_declaration)


State 384

   72 method_declaration: class_spec type_spec VARIABLE '(' args_list opt_block .

    $default  reduce using rule 72 (method_declaration)


State 385

   48 for_statement: FOR '(' VARIABLE ':' exp ')' statement .

    $default  reduce using rule 48 (for_statement)


State 386

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   47              | FOR '(' ';' exp ';' exp ')' . statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 402
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 387

   44 for_statement: FOR '(' var_def ';' exp ')' statement .

    $default  reduce using rule 44 (for_statement)


State 388

   45 for_statement: FOR '(' var_def exp ';' ')' statement .

    $default  reduce using rule 45 (for_statement)


State 389

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   43              | FOR '(' var_def exp ';' exp ')' . statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 403
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 390

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   27 block: . '{' statements '}'
   28      | . '{' '}'
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   49              | FOR '(' type_spec VARIABLE ':' exp ')' . statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 84
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    statement                    go to state 404
    block                        go to state 38
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    set_operation                go to state 50
    function_call                go to state 51
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 391

   40 if_statement: IF '(' exp ')' statement ELSE statement .

    $default  reduce using rule 40 (if_statement)


State 392

   59 switch_label: CASE STRING . ':'

    ':'  shift, and go to state 405


State 393

   60 switch_label: CASE INT . ':'

    ':'  shift, and go to state 406


State 394

   61 switch_label: CASE VARIABLE . ':'

    ':'  shift, and go to state 407


State 395

   62 switch_label: DEFAULT ':' .

    $default  reduce using rule 62 (switch_label)


State 396

   53 switch_statement: SWITCH '(' exp ')' '{' switch_block '}' .

    $default  reduce using rule 53 (switch_statement)


State 397

   55 switch_cont: statements . switch_labels switch_cont
   57 switch_labels: . switch_label switch_labels
   58              | . switch_label
   59 switch_label: . CASE STRING ':'
   60             | . CASE INT ':'
   61             | . CASE VARIABLE ':'
   62             | . DEFAULT ':'

    CASE     shift, and go to state 369
    DEFAULT  shift, and go to state 370

    switch_labels  go to state 408
    switch_label   go to state 373


State 398

   54 switch_block: switch_labels switch_cont .

    $default  reduce using rule 54 (switch_block)


State 399

   57 switch_labels: switch_label switch_labels .

    $default  reduce using rule 57 (switch_labels)


State 400

   52 timeout_statement: TIMEOUT '(' exp ',' exp ')' block .

    $default  reduce using rule 52 (timeout_statement)


State 401

  182 da_token: . '^' exp
  183         | . VARIABLE
  184         | . STRING
  185         | . WILDCARD
  186 da_args: ',' da_token '=' . da_token da_args

    STRING    shift, and go to state 132
    WILDCARD  shift, and go to state 133
    VARIABLE  shift, and go to state 134
    '^'       shift, and go to state 135

    da_token  go to state 409


State 402

   47 for_statement: FOR '(' ';' exp ';' exp ')' statement .

    $default  reduce using rule 47 (for_statement)


State 403

   43 for_statement: FOR '(' var_def exp ';' exp ')' statement .

    $default  reduce using rule 43 (for_statement)


State 404

   49 for_statement: FOR '(' type_spec VARIABLE ':' exp ')' statement .

    $default  reduce using rule 49 (for_statement)


State 405

   59 switch_label: CASE STRING ':' .

    $default  reduce using rule 59 (switch_label)


State 406

   60 switch_label: CASE INT ':' .

    $default  reduce using rule 60 (switch_label)


State 407

   61 switch_label: CASE VARIABLE ':' .

    $default  reduce using rule 61 (switch_label)


State 408

   13 statement: . block
   14          | . exp ';'
   15          | . grammar_rule
   16          | . set_operation
   17          | . return_statement
   18          | . propose_statement
   19          | . timeout_statement
   20          | . timeout_behaviour_statement
   21          | . if_statement
   22          | . while_statement
   23          | . for_statement
   24          | . switch_statement
   25 blk_statement: . statement
   26              | . var_def
   27 block: . '{' statements '}'
   28      | . '{' '}'
   29 statements: . blk_statement
   30           | . blk_statement statements
   31 grammar_rule: . VARIABLE ':' if_statement
   32 return_statement: . RETURN ';'
   33                 | . RETURN exp ';'
   34                 | . BREAK ';'
   35                 | . BREAK VARIABLE ';'
   36                 | . CANCEL ';'
   37                 | . CANCEL_ALL ';'
   38                 | . CONTINUE ';'
   39 if_statement: . IF '(' exp ')' statement
   40             | . IF '(' exp ')' statement ELSE statement
   41 while_statement: . WHILE '(' exp ')' statement
   42                | . DO statement WHILE '(' exp ')'
   43 for_statement: . FOR '(' var_def exp ';' exp ')' statement
   44              | . FOR '(' var_def ';' exp ')' statement
   45              | . FOR '(' var_def exp ';' ')' statement
   46              | . FOR '(' var_def ';' ')' statement
   47              | . FOR '(' ';' exp ';' exp ')' statement
   48              | . FOR '(' VARIABLE ':' exp ')' statement
   49              | . FOR '(' type_spec VARIABLE ':' exp ')' statement
   50 propose_statement: . PROPOSE '(' exp ')' block
   51 timeout_behaviour_statement: . TIMEOUT_BEHAVIOUR '(' exp ')' block
   52 timeout_statement: . TIMEOUT '(' exp ',' exp ')' block
   53 switch_statement: . SWITCH '(' exp ')' '{' switch_block '}'
   55 switch_cont: . statements switch_labels switch_cont
   55            | statements switch_labels . switch_cont
   56            | . %empty  ['}']
   63 var_def: . FINAL VARIABLE assgn_exp ';'
   64        | . type_spec VARIABLE assgn_exp ';'
   65        | . FINAL type_spec VARIABLE assgn_exp ';'
   86 set_operation: . VARIABLE PLUSEQ exp ';'
   87              | . VARIABLE MINUSEQ exp ';'
   88              | . ArrayAccess PLUSEQ exp ';'
   89              | . ArrayAccess MINUSEQ exp ';'
   90              | . field_access PLUSEQ exp ';'
   91              | . field_access MINUSEQ exp ';'
   92 function_call: . VARIABLE '(' ')'
   93              | . VARIABLE '(' nonempty_args_list ')'
   98 type_spec: . VARIABLE '[' ']'
   99          | . VARIABLE
  100          | . parameterized_type
  101 parameterized_type: . VARIABLE '<' type_spec_list '>'
  104 exp: . if_exp
  105    | . assignment
  106    | . ConditionalOrExpression
  107    | . dialogueact_exp
  108 ConditionalOrExpression: . ConditionalOrExpression OROR ConditionalAndExpression
  109                        | . ConditionalAndExpression
  110 ConditionalAndExpression: . ConditionalAndExpression ANDAND InclusiveOrExpression
  111                         | . InclusiveOrExpression
  112 InclusiveOrExpression: . ExclusiveOrExpression
  113                      | . InclusiveOrExpression '|' ExclusiveOrExpression
  114 ExclusiveOrExpression: . AndExpression
  115                      | . ExclusiveOrExpression '^' AndExpression
  116 AndExpression: . EqualityExpression
  117              | . AndExpression '&' EqualityExpression
  118 EqualityExpression: . RelationalExpression
  119                   | . EqualityExpression EQEQ RelationalExpression
  120                   | . EqualityExpression NOTEQ RelationalExpression
  121 RelationalExpression: . AdditiveExpression
  122                     | . RelationalExpression '<' AdditiveExpression
  123                     | . RelationalExpression '>' AdditiveExpression
  124                     | . RelationalExpression GTEQ AdditiveExpression
  125                     | . RelationalExpression LTEQ AdditiveExpression
  126 AdditiveExpression: . MultiplicativeExpression
  127                   | . AdditiveExpression '+' MultiplicativeExpression
  128                   | . AdditiveExpression '-' MultiplicativeExpression
  129 MultiplicativeExpression: . CastExpression
  130                         | . MultiplicativeExpression '*' CastExpression
  131                         | . MultiplicativeExpression '/' CastExpression
  132                         | . MultiplicativeExpression '%' CastExpression
  133 CastExpression: . UnaryExpression
  134               | . '(' type_spec ')' CastExpression
  135 LogicalUnaryExpression: . PostfixExpression
  136                       | . '!' UnaryExpression
  137                       | . '~' UnaryExpression
  138 UnaryExpression: . PLUSPLUS UnaryExpression
  139                | . MINUSMINUS UnaryExpression
  140                | . '+' CastExpression
  141                | . '-' CastExpression
  142                | . LogicalUnaryExpression
  143 PostfixExpression: . PrimaryExpression
  144 PrimaryExpression: . NULL
  145                  | . NotJustName
  146                  | . ComplexPrimary
  147 NotJustName: . VARIABLE
  148            | . new_exp
  149 ComplexPrimary: . '(' exp ')'
  150               | . ComplexPrimaryNoParenthesis
  151 ComplexPrimaryNoParenthesis: . Literal
  152                            | . ArrayAccess
  153                            | . field_access
  154                            | . function_call
  155 Literal: . STRING
  156        | . INT
  157        | . OTHER_LITERAL
  158 ArrayAccess: . VARIABLE '[' exp ']'
  159            | . ComplexPrimary '[' exp ']'
  160 if_exp: . exp '?' exp ':' exp
  161 assignment: . VARIABLE assgn_exp
  162           | . field_access assgn_exp
  163           | . ArrayAccess assgn_exp
  164 field_access: . NotJustName field_access_rest
  170 new_exp: . NEW VARIABLE
  171        | . NEW VARIABLE '(' ')'
  172        | . NEW VARIABLE '(' nonempty_exp_list ')'
  173        | . NEW parameterized_type '(' ')'
  174        | . NEW parameterized_type '(' nonempty_exp_list ')'
  175        | . NEW VARIABLE '[' exp ']'
  180 dialogueact_exp: . '#' da_token '(' da_token ')'
  181                | . '#' da_token '(' da_token da_args ')'

    BREAK              shift, and go to state 1
    CANCEL             shift, and go to state 2
    CANCEL_ALL         shift, and go to state 3
    CONTINUE           shift, and go to state 4
    DO                 shift, and go to state 5
    FINAL              shift, and go to state 115
    FOR                shift, and go to state 6
    IF                 shift, and go to state 7
    NEW                shift, and go to state 9
    NULL               shift, and go to state 10
    PROPOSE            shift, and go to state 12
    RETURN             shift, and go to state 15
    SWITCH             shift, and go to state 16
    TIMEOUT            shift, and go to state 17
    TIMEOUT_BEHAVIOUR  shift, and go to state 18
    WHILE              shift, and go to state 19
    MINUSMINUS         shift, and go to state 20
    PLUSPLUS           shift, and go to state 21
    STRING             shift, and go to state 22
    INT                shift, and go to state 23
    VARIABLE           shift, and go to state 116
    OTHER_LITERAL      shift, and go to state 25
    '{'                shift, and go to state 26
    '('                shift, and go to state 27
    '+'                shift, and go to state 29
    '-'                shift, and go to state 30
    '!'                shift, and go to state 31
    '~'                shift, and go to state 32
    '#'                shift, and go to state 33

    $default  reduce using rule 56 (switch_cont)

    statement                    go to state 118
    blk_statement                go to state 119
    block                        go to state 38
    statements                   go to state 397
    grammar_rule                 go to state 39
    return_statement             go to state 40
    if_statement                 go to state 41
    while_statement              go to state 42
    for_statement                go to state 43
    propose_statement            go to state 44
    timeout_behaviour_statement  go to state 45
    timeout_statement            go to state 46
    switch_statement             go to state 47
    switch_cont                  go to state 410
    var_def                      go to state 121
    set_operation                go to state 50
    function_call                go to state 51
    type_spec                    go to state 122
    parameterized_type           go to state 53
    exp                          go to state 54
    ConditionalOrExpression      go to state 55
    ConditionalAndExpression     go to state 56
    InclusiveOrExpression        go to state 57
    ExclusiveOrExpression        go to state 58
    AndExpression                go to state 59
    EqualityExpression           go to state 60
    RelationalExpression         go to state 61
    AdditiveExpression           go to state 62
    MultiplicativeExpression     go to state 63
    CastExpression               go to state 64
    LogicalUnaryExpression       go to state 65
    UnaryExpression              go to state 66
    PostfixExpression            go to state 67
    PrimaryExpression            go to state 68
    NotJustName                  go to state 69
    ComplexPrimary               go to state 70
    ComplexPrimaryNoParenthesis  go to state 71
    Literal                      go to state 72
    ArrayAccess                  go to state 73
    if_exp                       go to state 74
    assignment                   go to state 75
    field_access                 go to state 76
    new_exp                      go to state 77
    dialogueact_exp              go to state 78


State 409

  186 da_args: . ',' da_token '=' da_token da_args
  186        | ',' da_token '=' da_token . da_args
  187        | . %empty  [')']

    ','  shift, and go to state 347

    $default  reduce using rule 187 (da_args)

    da_args  go to state 411


State 410

   55 switch_cont: statements switch_labels switch_cont .

    $default  reduce using rule 55 (switch_cont)


State 411

  186 da_args: ',' da_token '=' da_token da_args .

    $default  reduce using rule 186 (da_args)
