/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package de.dfki.mlt.rudimant.agent;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class QuizQuestion implements org.apache.thrift.TBase<QuizQuestion, QuizQuestion._Fields>, java.io.Serializable, Cloneable, Comparable<QuizQuestion> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QuizQuestion");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField QUESTION_TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("questionText", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ANSWERS_FIELD_DESC = new org.apache.thrift.protocol.TField("answers", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField GOAL_FIELD_DESC = new org.apache.thrift.protocol.TField("goal", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField WHICH_CORRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("whichCorrect", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField ASKER_FIELD_DESC = new org.apache.thrift.protocol.TField("asker", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new QuizQuestionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new QuizQuestionTupleSchemeFactory());
  }

  public int id; // required
  public String questionText; // required
  public List<String> answers; // required
  public String goal; // required
  public int whichCorrect; // required
  public String asker; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    QUESTION_TEXT((short)2, "questionText"),
    ANSWERS((short)3, "answers"),
    GOAL((short)4, "goal"),
    WHICH_CORRECT((short)5, "whichCorrect"),
    ASKER((short)6, "asker");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // QUESTION_TEXT
          return QUESTION_TEXT;
        case 3: // ANSWERS
          return ANSWERS;
        case 4: // GOAL
          return GOAL;
        case 5: // WHICH_CORRECT
          return WHICH_CORRECT;
        case 6: // ASKER
          return ASKER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __WHICHCORRECT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.QUESTION_TEXT, new org.apache.thrift.meta_data.FieldMetaData("questionText", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANSWERS, new org.apache.thrift.meta_data.FieldMetaData("answers", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.GOAL, new org.apache.thrift.meta_data.FieldMetaData("goal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WHICH_CORRECT, new org.apache.thrift.meta_data.FieldMetaData("whichCorrect", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ASKER, new org.apache.thrift.meta_data.FieldMetaData("asker", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QuizQuestion.class, metaDataMap);
  }

  public QuizQuestion() {
  }

  public QuizQuestion(
    int id,
    String questionText,
    List<String> answers,
    String goal,
    int whichCorrect,
    String asker)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.questionText = questionText;
    this.answers = answers;
    this.goal = goal;
    this.whichCorrect = whichCorrect;
    setWhichCorrectIsSet(true);
    this.asker = asker;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QuizQuestion(QuizQuestion other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    if (other.isSetQuestionText()) {
      this.questionText = other.questionText;
    }
    if (other.isSetAnswers()) {
      List<String> __this__answers = new ArrayList<String>(other.answers);
      this.answers = __this__answers;
    }
    if (other.isSetGoal()) {
      this.goal = other.goal;
    }
    this.whichCorrect = other.whichCorrect;
    if (other.isSetAsker()) {
      this.asker = other.asker;
    }
  }

  public QuizQuestion deepCopy() {
    return new QuizQuestion(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    this.questionText = null;
    this.answers = null;
    this.goal = null;
    setWhichCorrectIsSet(false);
    this.whichCorrect = 0;
    this.asker = null;
  }

  public int getId() {
    return this.id;
  }

  public QuizQuestion setId(int id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public String getQuestionText() {
    return this.questionText;
  }

  public QuizQuestion setQuestionText(String questionText) {
    this.questionText = questionText;
    return this;
  }

  public void unsetQuestionText() {
    this.questionText = null;
  }

  /** Returns true if field questionText is set (has been assigned a value) and false otherwise */
  public boolean isSetQuestionText() {
    return this.questionText != null;
  }

  public void setQuestionTextIsSet(boolean value) {
    if (!value) {
      this.questionText = null;
    }
  }

  public int getAnswersSize() {
    return (this.answers == null) ? 0 : this.answers.size();
  }

  public java.util.Iterator<String> getAnswersIterator() {
    return (this.answers == null) ? null : this.answers.iterator();
  }

  public void addToAnswers(String elem) {
    if (this.answers == null) {
      this.answers = new ArrayList<String>();
    }
    this.answers.add(elem);
  }

  public List<String> getAnswers() {
    return this.answers;
  }

  public QuizQuestion setAnswers(List<String> answers) {
    this.answers = answers;
    return this;
  }

  public void unsetAnswers() {
    this.answers = null;
  }

  /** Returns true if field answers is set (has been assigned a value) and false otherwise */
  public boolean isSetAnswers() {
    return this.answers != null;
  }

  public void setAnswersIsSet(boolean value) {
    if (!value) {
      this.answers = null;
    }
  }

  public String getGoal() {
    return this.goal;
  }

  public QuizQuestion setGoal(String goal) {
    this.goal = goal;
    return this;
  }

  public void unsetGoal() {
    this.goal = null;
  }

  /** Returns true if field goal is set (has been assigned a value) and false otherwise */
  public boolean isSetGoal() {
    return this.goal != null;
  }

  public void setGoalIsSet(boolean value) {
    if (!value) {
      this.goal = null;
    }
  }

  public int getWhichCorrect() {
    return this.whichCorrect;
  }

  public QuizQuestion setWhichCorrect(int whichCorrect) {
    this.whichCorrect = whichCorrect;
    setWhichCorrectIsSet(true);
    return this;
  }

  public void unsetWhichCorrect() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WHICHCORRECT_ISSET_ID);
  }

  /** Returns true if field whichCorrect is set (has been assigned a value) and false otherwise */
  public boolean isSetWhichCorrect() {
    return EncodingUtils.testBit(__isset_bitfield, __WHICHCORRECT_ISSET_ID);
  }

  public void setWhichCorrectIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WHICHCORRECT_ISSET_ID, value);
  }

  public String getAsker() {
    return this.asker;
  }

  public QuizQuestion setAsker(String asker) {
    this.asker = asker;
    return this;
  }

  public void unsetAsker() {
    this.asker = null;
  }

  /** Returns true if field asker is set (has been assigned a value) and false otherwise */
  public boolean isSetAsker() {
    return this.asker != null;
  }

  public void setAskerIsSet(boolean value) {
    if (!value) {
      this.asker = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Integer)value);
      }
      break;

    case QUESTION_TEXT:
      if (value == null) {
        unsetQuestionText();
      } else {
        setQuestionText((String)value);
      }
      break;

    case ANSWERS:
      if (value == null) {
        unsetAnswers();
      } else {
        setAnswers((List<String>)value);
      }
      break;

    case GOAL:
      if (value == null) {
        unsetGoal();
      } else {
        setGoal((String)value);
      }
      break;

    case WHICH_CORRECT:
      if (value == null) {
        unsetWhichCorrect();
      } else {
        setWhichCorrect((Integer)value);
      }
      break;

    case ASKER:
      if (value == null) {
        unsetAsker();
      } else {
        setAsker((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return Integer.valueOf(getId());

    case QUESTION_TEXT:
      return getQuestionText();

    case ANSWERS:
      return getAnswers();

    case GOAL:
      return getGoal();

    case WHICH_CORRECT:
      return Integer.valueOf(getWhichCorrect());

    case ASKER:
      return getAsker();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case QUESTION_TEXT:
      return isSetQuestionText();
    case ANSWERS:
      return isSetAnswers();
    case GOAL:
      return isSetGoal();
    case WHICH_CORRECT:
      return isSetWhichCorrect();
    case ASKER:
      return isSetAsker();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof QuizQuestion)
      return this.equals((QuizQuestion)that);
    return false;
  }

  public boolean equals(QuizQuestion that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_questionText = true && this.isSetQuestionText();
    boolean that_present_questionText = true && that.isSetQuestionText();
    if (this_present_questionText || that_present_questionText) {
      if (!(this_present_questionText && that_present_questionText))
        return false;
      if (!this.questionText.equals(that.questionText))
        return false;
    }

    boolean this_present_answers = true && this.isSetAnswers();
    boolean that_present_answers = true && that.isSetAnswers();
    if (this_present_answers || that_present_answers) {
      if (!(this_present_answers && that_present_answers))
        return false;
      if (!this.answers.equals(that.answers))
        return false;
    }

    boolean this_present_goal = true && this.isSetGoal();
    boolean that_present_goal = true && that.isSetGoal();
    if (this_present_goal || that_present_goal) {
      if (!(this_present_goal && that_present_goal))
        return false;
      if (!this.goal.equals(that.goal))
        return false;
    }

    boolean this_present_whichCorrect = true;
    boolean that_present_whichCorrect = true;
    if (this_present_whichCorrect || that_present_whichCorrect) {
      if (!(this_present_whichCorrect && that_present_whichCorrect))
        return false;
      if (this.whichCorrect != that.whichCorrect)
        return false;
    }

    boolean this_present_asker = true && this.isSetAsker();
    boolean that_present_asker = true && that.isSetAsker();
    if (this_present_asker || that_present_asker) {
      if (!(this_present_asker && that_present_asker))
        return false;
      if (!this.asker.equals(that.asker))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(QuizQuestion other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetQuestionText()).compareTo(other.isSetQuestionText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQuestionText()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.questionText, other.questionText);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnswers()).compareTo(other.isSetAnswers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnswers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.answers, other.answers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGoal()).compareTo(other.isSetGoal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGoal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.goal, other.goal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWhichCorrect()).compareTo(other.isSetWhichCorrect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhichCorrect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whichCorrect, other.whichCorrect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAsker()).compareTo(other.isSetAsker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsker()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asker, other.asker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("QuizQuestion(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("questionText:");
    if (this.questionText == null) {
      sb.append("null");
    } else {
      sb.append(this.questionText);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("answers:");
    if (this.answers == null) {
      sb.append("null");
    } else {
      sb.append(this.answers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("goal:");
    if (this.goal == null) {
      sb.append("null");
    } else {
      sb.append(this.goal);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("whichCorrect:");
    sb.append(this.whichCorrect);
    first = false;
    if (!first) sb.append(", ");
    sb.append("asker:");
    if (this.asker == null) {
      sb.append("null");
    } else {
      sb.append(this.asker);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    if (questionText == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'questionText' was not present! Struct: " + toString());
    }
    if (answers == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'answers' was not present! Struct: " + toString());
    }
    if (goal == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'goal' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'whichCorrect' because it's a primitive and you chose the non-beans generator.
    if (asker == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'asker' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QuizQuestionStandardSchemeFactory implements SchemeFactory {
    public QuizQuestionStandardScheme getScheme() {
      return new QuizQuestionStandardScheme();
    }
  }

  private static class QuizQuestionStandardScheme extends StandardScheme<QuizQuestion> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QuizQuestion struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.id = iprot.readI32();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // QUESTION_TEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.questionText = iprot.readString();
              struct.setQuestionTextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ANSWERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.answers = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.answers.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setAnswersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GOAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.goal = iprot.readString();
              struct.setGoalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WHICH_CORRECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.whichCorrect = iprot.readI32();
              struct.setWhichCorrectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ASKER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.asker = iprot.readString();
              struct.setAskerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetWhichCorrect()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'whichCorrect' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QuizQuestion struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI32(struct.id);
      oprot.writeFieldEnd();
      if (struct.questionText != null) {
        oprot.writeFieldBegin(QUESTION_TEXT_FIELD_DESC);
        oprot.writeString(struct.questionText);
        oprot.writeFieldEnd();
      }
      if (struct.answers != null) {
        oprot.writeFieldBegin(ANSWERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.answers.size()));
          for (String _iter3 : struct.answers)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.goal != null) {
        oprot.writeFieldBegin(GOAL_FIELD_DESC);
        oprot.writeString(struct.goal);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WHICH_CORRECT_FIELD_DESC);
      oprot.writeI32(struct.whichCorrect);
      oprot.writeFieldEnd();
      if (struct.asker != null) {
        oprot.writeFieldBegin(ASKER_FIELD_DESC);
        oprot.writeString(struct.asker);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QuizQuestionTupleSchemeFactory implements SchemeFactory {
    public QuizQuestionTupleScheme getScheme() {
      return new QuizQuestionTupleScheme();
    }
  }

  private static class QuizQuestionTupleScheme extends TupleScheme<QuizQuestion> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QuizQuestion struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.id);
      oprot.writeString(struct.questionText);
      {
        oprot.writeI32(struct.answers.size());
        for (String _iter4 : struct.answers)
        {
          oprot.writeString(_iter4);
        }
      }
      oprot.writeString(struct.goal);
      oprot.writeI32(struct.whichCorrect);
      oprot.writeString(struct.asker);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QuizQuestion struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI32();
      struct.setIdIsSet(true);
      struct.questionText = iprot.readString();
      struct.setQuestionTextIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.answers = new ArrayList<String>(_list5.size);
        for (int _i6 = 0; _i6 < _list5.size; ++_i6)
        {
          String _elem7;
          _elem7 = iprot.readString();
          struct.answers.add(_elem7);
        }
      }
      struct.setAnswersIsSet(true);
      struct.goal = iprot.readString();
      struct.setGoalIsSet(true);
      struct.whichCorrect = iprot.readI32();
      struct.setWhichCorrectIsSet(true);
      struct.asker = iprot.readString();
      struct.setAskerIsSet(true);
    }
  }

}

