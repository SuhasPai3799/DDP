ask_for_turntablet:
/*
 oneOf(game.tablet, tablet => (tablet.isAvailable &&
    tablet.supposedOrientation != tablet.currentOrientation))
 allOf(...)
 */
if (game.tablet.isAvailable
    && game.tablet.supposedOrientation != game.tablet.currentOrientation) {
  var last = lastSubsumedDA(@Request(Turn, what=tablet, sender=I_MYSELF));
  if (last != null && last.time - currentTime > MAX_WAIT_FOR_TABLET) {
    propose("request_turntablet") {
      emitDA(@Request(Turn, what=tablet, sender=I_MYSELF));
    }
  }
}

give_next_question:
// if inSession, which means a new turn is in progress, do something
if (game.status == inSession && game.activeParticipant == I_MYSELF
    // GAME LOGIC START
    && (! game.tablet.isAvailable
        || game.tablet.orientation == POINTS_TO_ME)) {
  propose("ask-question") {
    var qa = gameLogic.getNewQuestionAndAnswers();
    // game.lastMove.Question = qa; // done by game logic
    emitDA(@ChoiceQuestion(Quiz, what=qa.question, answers=qa.answers));
    if (game.tablet.isAvailable)
      emitDA(@Inform(Turn, hasTheme=tablet)); // GAME LOGIC??
    // game.status = questionAsked; // done by game logic
  }
}