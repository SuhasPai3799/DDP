/*@
import pal.TECS.QuizQuestion;
@*/

void robotAnswers(String answerString, int answerNumber, boolean correct) {
  if (random() > 0.5) {
    // Robot thinks about the anser
    emitDA(#Stalling(Answering));
  }
  emitDA(#Inform(Answer,
           id=^Integer.toString(answerNumber + 1),
           ^("string" + Integer.toString(answerNumber + 1))=^answerString));
  quiz.status = "run_answer_given";
  turn = getCurrentTurn(quiz);
  turn.correct = correct;
}

// **********************************************************************
// Quiz Interpretation
// **********************************************************************

quiz:
if (quiz <= Quiz && getUserFeedback()) {
 question_read_by_user:
  if (quiz.status == "running_wait_for_question_read") {
    userReadsQuestion();
  }

 answer_given_by_user:
  if (quiz.status == "running_wait_for_answer"
      && getCurrentAsker() == I_ROBOT) {
    turn = getCurrentTurn(quiz);
    if (turn) {
      turn.answerId = getAnswerId(getUserFeedback());
      quiz.status = "running_answer_given";
    }
  }
  userFeedbackProcessed();
}

// **********************************************************************
// Quiz Incoming Dialogue Act
// **********************************************************************

incoming_quiz:
if (! lastDA()) return;

/*
  - if role requested (see processIncomingSpeechActs)
  - if asked for role: accept,
  otherwise accept or reject (current roles stay)
*/
incoming_rolefeedback:
if (lastDA() <= #Request(AssigningRole)
    || lastDA() <= #AcceptRequest(AssigningRole)
    || lastDA() <= #RejectRequest(AssigningRole)) {
  if (!quiz || ! (quiz <= Quiz)) {
    // TODO: clarification dialogue??
    return;
  }
  // THIS WILL NOW START QUIZ IN EARNEST
  String thm = lastDA().getSlot("theme");
  String agtUri = lastDA().getSlot("agent");
  // TODO: CREATE A SHORTCUT FOR THIS
  Actor agt = toRdf(agtUri);
  if (null == agtUri) {
    agt = user;
  } else // turn agent around
    if (lastDA() <= #RejectRequest(AssigningRole)) {
      agt = (agt == user) ? I_ROBOT : user;
    }

  // TODO check if theme matches current quiz (e.g. quiz game)
  QuizHistory turn = new QuizHistory;
  quiz.hasHistory.add(turn);
  turn.asker = agt;
  turn.responder = (agt == user) ? I_ROBOT : user;
  // Todo: see above, not yet implemented, always accept
  //if (true) { // accept role
  emitDA(#Accept(AssigningRole, theme=^thm, agent=^agt));
  // This is more or less a duplication of the above
  //emitDA(#Inform(Instructing, theme=^thm, agent=^agt, purpose=Asking);

  if (! childAtHome()) {
    // THIS IS ONLY THE COMMUNICATION WITH THE QUIZ LOGIC
    // this is sending a QuizCommand(start_hospital, whereas in the home
    // situation, this command comes from the MyPalApp
    getHub().startQuiz(user, agt);
  }
  if (quiz.status == "started") {
    quiz.status = "running";
  }

  lastDAprocessed();
}

// TODO: THIS CONTAINS A LOT OF JAVA CODE. I DON'T KNOW IF THERE'S A BETTER WAY
// TO DO IT.
// The child has read question and answers, now the robot has to give an
// answer
incoming_answergiven:
if (lastDA() <= #Inform(Answering)) {
  if (! quiz <= Quiz) {
    logger.error("Answer given outside of quiz.");
    return;
  }
  turn = getCurrentTurn(quiz);
  int qId = turn.questionId;
  QuizQuestion q = questionCache.get(qId);
  int correct = q.getWhichCorrect();
  int wrong = correct + 1 + random(q.getAnswersSize() - 1)
    % q.getAnswersSize();
  // Answers were read by child, give an answer

  propose("give_correct_answer") {
    robotAnswers(q.getAnswers().get(correct), correct, true);
  }
  propose("give_wrong_answer") {
    robotAnswers(q.getAnswers().get(wrong), wrong, false);
  }
  lastDAprocessed();
}
